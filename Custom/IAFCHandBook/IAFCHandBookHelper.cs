using SitefinityWebApp.Mvc.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using Telerik.OpenAccess;
using Telerik.Sitefinity;
using Telerik.Sitefinity.DynamicModules;
using Telerik.Sitefinity.DynamicModules.Model;
using Telerik.Sitefinity.GenericContent.Model;
using Telerik.Sitefinity.Lifecycle;
using Telerik.Sitefinity.Model;
using Telerik.Sitefinity.Publishing;
using Telerik.Sitefinity.RelatedData;
using Telerik.Sitefinity.Security;
using Telerik.Sitefinity.Security.Model;
using Telerik.Sitefinity.Taxonomies;
using Telerik.Sitefinity.Taxonomies.Model;
using Telerik.Sitefinity.Utilities.TypeConverters;
using Telerik.Sitefinity.Libraries.Model;
using Telerik.Sitefinity.Data.Linq.Dynamic;
using Telerik.Sitefinity.Data;
using ServiceStack.Logging;
using System.Threading.Tasks;
using Telerik.Sitefinity.Security.Claims;
using Telerik.Sitefinity.Services;
using Telerik.Sitefinity.Services.Notifications;
using Telerik.Sitefinity.Modules.Libraries;
using System.Threading;

namespace SitefinityWebApp.Custom.IAFCHandBook
{

	public partial class IAFCHandBookHelper
	{
		private ILog log = LogManager.GetLogger(typeof(IAFCHandBookHelper));
		private static object _likeLock = new object();
		#region Struct
		private struct Categories
		{
			public Categories(String resourceCategoryTile,
							  String resourceCategoryDescription,
							  String resourceParentCategoryDescription,
							  String resourceParentCategoryUrl,
							  String resourceParentCategoryTitle,
							  String resourceParentCategoryImageUrl,
							  String resourceCategoryUrl,
							  String myHandbookResourceParentCategoryUrl,
							  String myHandbookResourceCategoryUrl,
							  Image categoryImage,
							  String categoryClass)
			{
				ResourceCategoryTile = resourceCategoryTile;
				ResourceCategoryUrl = resourceCategoryUrl;
				ResourceParentCategoryUrl = resourceParentCategoryUrl;
				ResourceParentCategoryTitle = resourceParentCategoryTitle;
				ResourceParentCategoryImageUrl = resourceParentCategoryImageUrl;
				MyHandbookResourceCategoryUrl = myHandbookResourceCategoryUrl;
				MyHandbookResourceParentCategoryUrl = myHandbookResourceParentCategoryUrl;
				ResourceCategoryDescription = resourceCategoryDescription;
				ResourceParentCategoryDescription = resourceParentCategoryDescription;
				CategoryImage = categoryImage;
				CategoryClass = categoryClass;
			}

			public String ResourceCategoryTile { get; set; }
			public String ResourceCategoryUrl { get; set; }
			public String ResourceParentCategoryUrl { get; set; }
			public String ResourceParentCategoryTitle { get; set; }
			public String ResourceParentCategoryImageUrl { get; set; }
			public String MyHandbookResourceCategoryUrl { get; set; }
			public String MyHandbookResourceParentCategoryUrl { get; set; }
			public String ResourceCategoryDescription { get; set; }
			public String ResourceParentCategoryDescription { get; set; }
			public String CategoryClass { get; set; }
			public Image CategoryImage { get; set; }

		}
		#endregion Struct

		#region Constants

		private const string UrlNameCharsToReplace = @"[^\w\-\!\$\'\(\)\=\@\d_]+";
		private const string UrlNameReplaceString = "-";
		private const string durationFormat = "hh\\:mm:\\ss";

		private const string LeadershipCategoryTitle = "Leadership";
		private const string CommunityCategoryTitle = "Community";
		private const string FinanceCategoryTitle = "Finance";
		private const string PersonnelCategoryTitle = "Personnel";

		private const string OrderByTopic = "By Topic";
		private const string OrderByMostPopular = "Most Popular";
		private const string OrderByMostRecent = "Most Recent";
		private const string OrderByAlphabeticalAZ = "Alphabetical A-Z";
		private const string OrderByAlphabeticalZA = "Alphabetical Z-A";

		private const string commentResource = "Comment";
		private const string resourceResource = "Resource";
		private const string topicMenuUrl = "chiefs-a-rit/topics";
		private const string MyHandBookMenuUrl = "chiefs-a-rit/my-a-rit";

		#region DynamicTypes
		private Type handBookResourcesType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.IAFCHandBookResourcesData.Iafchandbookresourcesdata");
		private Type externalResourcesType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.HandbookResources.ResourcesExternal");
		private Type resourceType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.Resources.Resource");
		private Type resourceLikesType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.IAFCHandBookLikes.Iafchandbooklikes");
		private Type resourceCommentsType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.IAFCHandBookComments.Iafchandbookcomments");
		private Type myHandBookType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.IAFCMyHandBook.Iafcmyhandbook");
		private Type categoryIcons = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.CategoryIcons.CategoryIcons");
		#endregion DynamicTypes

		#region CategoriesName
		public const String LeadershipMotivatingPeopleName = "motivating-people";
		public const String LeadershipLeadershipStylesName = "leadership-styles";
		public const String LeadershipEthicsName = "ethics";
		public const String LeadershipGenerationalDifferencesName = "generational-differences";
		public const String LeadershipStrategyName = "strategy";
		public const String PersonnelVolunteerCareerRelationsName = "volunteer-career-relations";
		public const String PersonnelRecruitmentName = "recruitment2";
		public const String PersonnelRetentionName = "retention2";
		public const String PersonnelLegalIssuesName = "legal-issues-personnel";
		public const String PersonnelInsuranceName = "insurance";
		public const String FinanceBudgetingName = "budgeting";
		public const String FinanceFundraisingName = "fundraising";
		public const String FinanceLegalIssuesName = "legal-issues-finance";
		public const String CommunityRelationsCustomerServiceName = "customer-service";
		public const String CommunityRelationsMarketingMediaName = "marketing-media";
		public const String CommunityRelationsPoliticsName = "politics";
		public const String CommunityRelationsCrisisCommunicationName = "crisis-communication";

		public const String Featured_VWS_A_RITName = "featured-vws-a-rit";
		public const String LeadershipName = "leadership";
		public const String PersonnelName = "personnel";
		public const String FinanceName = "finance";
		public const String CommunityName = "community-relations";
		public const String DepartmentAdministrationName = "department-administration";

		public const String ProjectVWSARIT = "project-vws-a-rit";
		#endregion CategoriesName

		#region Urls
		//Urls
		private const string MainPage = "/topics-and-tools/volunteer/vws/chiefs-a-rit";
		private const string PageNotFound = MainPage+ "/page-not-found/";
		private const string TopicCommunityUrl = MainPage + "/topics/community";
		private const string TopicCommunityCrisisCommunicationUrl = MainPage + "/topics/community/crisis-communication";
		private const string TopicCommunityCustomerServiceUrl = MainPage + "/topics/community/customer-service";
		private const string TopicCommunityMarketingAndMediaUrl = MainPage + "/topics/community/marketing-and-media";
		private const string TopicCommunityPoliticsUrl = MainPage + "/topics/community/politics";
		private const string TopicLeadershipUrl = MainPage + "/topics/leadership";
		private const string TopicLeadershipEthicsUrl = MainPage + "/topics/leadership/ethics";
		private const string TopicLeadershipGenerationalDifferencesUrl = MainPage + "/topics/leadership/generational-differences";
		private const string TopicLeadershipLeadershipStylesUrl = MainPage + "/topics/leadership/leadership-styles";
		private const string TopicLeadershipMotivatingPeopleUrl = MainPage + "/topics/leadership/motivating-people";
		private const string TopicLeadershipStrategyUrl = MainPage + "/topics/leadership/strategy";
		private const string TopicFinanceUrl = MainPage + "/topics/finance";
		private const string TopicFinanceBudgetingUrl = MainPage + "/topics/finance/budgeting";
		private const string TopicFinanceFundraisingUrl = MainPage + "/topics/finance/fundraising";
		private const string TopicFinanceLegalIssuesUrl = MainPage + "/topics/finance/legal-issues";
		private const string TopicPersonnelUrl = MainPage + "/topics/personnel";
		private const string TopicPersonnelInsuranceUrl = MainPage + "/topics/personnel/insurance";
		private const string TopicPersonnelLegalIssuesUrl = MainPage + "/topics/personnel/legal-issues";
		private const string TopicPersonnelRecruitmentUrl = MainPage + "/topics/personnel/recruitment";
		private const string TopicPersonnelRetentionUrl = MainPage + "/topics/personnel/retention";
		private const string TopicPersonnelVolunteerCareerRelationsUrl = MainPage + "/topics/personnel/volunteer-career-relations";

		private const string ResourceDetailsUrl = MainPage + "/iafcresourcedetails/";

		private const string TopicCommunityImageUrl = "/Sitefinity/WebsiteTemplates/IAFCHandBook/App_Themes/IAFCHandBook/images/community-multiply.svg";
		private const string TopicLeadershipImageUrl = "/Sitefinity/WebsiteTemplates/IAFCHandBook/App_Themes/IAFCHandBook/images/leadership-multiply.svg";
		private const string TopicFinanceImageUrl = "/Sitefinity/WebsiteTemplates/IAFCHandBook/App_Themes/IAFCHandBook/images/finance-multiply.svg";
		private const string TopicPersonnelImageUrl = "/Sitefinity/WebsiteTemplates/IAFCHandBook/App_Themes/IAFCHandBook/images/personnel-multiply.svg";

		private const string DefaultPodcastImgUrl = "/images/default-source/icons/podcast.svg";
		private const string DefaultChartImgUrl = "/images/default-source/icons/chart.svg";
		private const string DefaultVideoImgUrl = "/images/default-source/icons/video.svg";
		private const string DefaultLinkImgUrl = "/images/default-source/icons/link.svg";
		private const string DefaultImageImgUrl = "/images/default-source/icons/image.svg";
		private const string DefaultWebinarImgUrl = "/images/default-source/icons/webinar.svg";
		private const string DefaultArticleImgUrl = "/images/default-source/icons/article.svg";
		private const string DefaultAudioImgUrl = "/images/default-source/icons/audio.svg";
		private const string DefaultBookImgUrl = "/images/default-source/icons/book.svg";
		private const string DefaultPaceholderImgUrl = "/images/default-source/icons/resource-placeholder.svg";
		#endregion Urls

		#region Class
		private const string CommunityParentClass = "topics__text-first";
		private const string LeadershipParentClass = "topics__text-yellow";
		private const string FinanceParentClass = "topics__text-green";
		private const string PersonnelParentClass = "topics__text-red";

		private const string CommunityChildClass = "topics__content-blue";
		private const string LeadershipChildClass = "topics__content-yellow";
		private const string FinanceChildClass = "topics__content-green";
		private const string PersonnelChildClass = "topics__content-red";
		#endregion Class

		#region Svg

		private const string CommunityParentSvg = @"<svg height = ""40px"" viewbox=""0 0 82 75"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"">
<g id = ""Design-Elements"" stroke=""none"" stroke-width=""1"" fill=""none"" fill-rule=""evenodd"" transform=""translate(-825.000000, -270.000000)"">
<path d = ""M858.379894,312.983821 C858.379894,311.825398 859.323145,310.88629 860.486209,310.88629 C861.649654,310.88629 862.592905,311.825398 862.592905,312.983821 C862.592905,314.142623 861.649654,315.081731 860.486209,315.081731 C859.323145,315.081731 858.379894,314.142623 858.379894,312.983821 Z M841.057367,341.962603 L836.399016,341.962603 L837.636367,339.334239 L841.051652,339.334239 C841.054319,339.334239 841.056224,339.334998 841.05889,339.334998 C841.061557,339.334998 841.063843,339.334239 841.06651,339.334239 L854.363076,339.334239 L866.609723,339.334239 L879.915051,339.334239 L883.336432,339.334239 L884.573783,341.962603 L841.057367,341.962603 Z M830.430552,318.486044 L839.533536,318.486044 L839.533536,336.298739 L836.667972,336.298739 C836.076726,336.298739 835.539195,336.639474 835.288524,337.172204 L833.032874,341.962603 L830.430552,341.962603 L830.430552,318.486044 Z M846.146199,307.489186 L846.146199,336.298739 L842.582721,336.298739 L842.582721,316.967156 C842.582721,316.961844 842.581197,316.95767 842.581197,316.952358 L842.581197,307.489186 L846.146199,307.489186 Z M850.032349,301.196594 C850.033111,301.196215 850.033873,301.195835 850.034254,301.195456 L860.486209,296.479806 L878.159598,304.453686 L842.813201,304.453686 L850.032349,301.196594 Z M850.96379,288.703234 L853.440015,288.703234 L853.440015,296.326514 L850.96379,297.443578 L850.96379,288.703234 Z M860.27592,277.693855 C860.344874,277.70372 860.414208,277.715103 860.486209,277.715103 C860.558591,277.715103 860.627544,277.70372 860.696878,277.693855 C865.335038,277.795544 869.167854,281.208584 869.888626,285.652557 L851.084173,285.652557 C851.804564,281.208584 855.63776,277.795544 860.27592,277.693855 Z M862.011563,288.703234 L864.487788,288.703234 L864.487788,294.95257 L862.011563,293.835506 L862.011563,288.703234 Z M858.963902,288.703234 L858.963902,293.833988 L856.487677,294.951432 L856.487677,288.703234 L858.963902,288.703234 Z M870.011675,297.445095 L867.53545,296.328031 L867.53545,288.703234 L870.011675,288.703234 L870.011675,297.445095 Z M855.887288,336.298739 L865.085892,336.298739 L865.085892,321.514335 L855.887288,321.514335 L855.887288,336.298739 Z M871.821986,336.298739 L868.133554,336.298739 L868.133554,319.996585 C868.133554,319.158408 867.451258,318.478835 866.609723,318.478835 L854.363076,318.478835 C853.52154,318.478835 852.839245,319.158408 852.839245,319.996585 L852.839245,336.298739 L849.193861,336.298739 L849.193861,307.489186 L871.821986,307.489186 L871.821986,336.298739 Z M885.684274,337.172204 C885.433604,336.639474 884.896073,336.298739 884.304827,336.298739 L881.438882,336.298739 L881.438882,334.889887 C881.438882,334.05171 880.756587,333.372137 879.915051,333.372137 C879.073516,333.372137 878.39122,334.05171 878.39122,334.889887 L878.39122,336.298739 L874.869647,336.298739 L874.869647,307.489186 L878.39122,307.489186 L878.39122,314.6708 C878.39122,315.508977 879.073516,316.18855 879.915051,316.18855 C880.756587,316.18855 881.438882,315.508977 881.438882,314.6708 L881.438882,307.489186 L885.216458,307.489186 C885.934183,307.489186 886.554763,306.990226 886.706003,306.291681 C886.857624,305.592757 886.499143,304.883589 885.845419,304.588766 L873.059336,298.820177 L873.059336,288.703234 L873.345817,288.703234 C874.187352,288.703234 874.869647,288.023662 874.869647,287.185484 C874.869647,286.347307 874.187352,285.667734 873.345817,285.667734 L872.964097,285.667734 C872.276468,279.967444 867.730881,275.436201 862.01004,274.744107 L862.01004,271.51775 C862.01004,270.679573 861.327744,270 860.486209,270 C859.644673,270 858.962378,270.679573 858.962378,271.51775 L858.962378,274.744107 C853.241917,275.436201 848.69633,279.967444 848.008321,285.667734 L847.62622,285.667734 C846.784685,285.667734 846.102389,286.347307 846.102389,287.185484 C846.102389,288.023662 846.784685,288.703234 847.62622,288.703234 L847.916129,288.703234 L847.916129,298.818659 L835.127379,304.588766 C834.473656,304.883589 834.115175,305.592757 834.266415,306.291681 C834.418036,306.990226 835.038235,307.489186 835.755959,307.489186 L839.533536,307.489186 L839.533536,315.449406 L828.906721,315.449406 C828.902912,315.449406 828.899102,315.450544 828.895292,315.450544 L826.523831,315.450544 C825.682295,315.450544 825,316.130117 825,316.968294 C825,317.806472 825.682295,318.486044 826.523831,318.486044 L827.38289,318.486044 L827.38289,341.962603 L826.523831,341.962603 C825.682295,341.962603 825,342.642175 825,343.480353 C825,344.31853 825.682295,344.998103 826.523831,344.998103 L828.888054,344.998103 C828.89453,344.998103 828.900245,345 828.906721,345 L841.05889,345 C841.065367,345 841.071081,344.998103 841.077557,344.998103 L886.97153,344.998103 C887.492681,344.998103 887.97764,344.732876 888.257644,344.294626 C888.537266,343.855996 888.572315,343.306191 888.350978,342.836068 L885.684274,337.172204 Z M897.909207,330.913382 L894.287061,330.913382 L894.287061,329.060968 L897.194149,326.16548 C897.789205,325.573178 897.789205,324.612063 897.194149,324.019382 C896.599474,323.426321 895.633746,323.426321 895.039071,324.019382 L894.287061,324.768771 L894.287061,318.779729 C894.287061,317.941551 893.604766,317.261979 892.76323,317.261979 C891.921695,317.261979 891.239399,317.941551 891.239399,318.779729 L891.239399,322.289147 L889.765093,320.820723 C889.170418,320.228042 888.20469,320.228042 887.610396,320.820723 C887.01496,321.413405 887.01496,322.37452 887.610396,322.967201 L891.239399,326.581723 L891.239399,330.913382 L887.357441,330.913382 C884.025204,330.913382 881.314309,328.213305 881.314309,324.894365 C881.314309,322.248926 883.088429,319.877442 885.629416,319.126914 C886.082756,318.993352 886.419904,318.665139 886.592097,318.262935 C886.596287,318.25307 886.600478,318.242825 886.605049,318.232959 C886.634764,318.15821 886.658383,318.082323 886.676288,318.0034 C886.682383,317.977598 886.688098,317.952555 886.692669,317.926374 C886.703717,317.862249 886.709431,317.798124 886.712098,317.732102 C886.713622,317.7063 886.720098,317.682016 886.720098,317.655835 C886.720098,314.336895 889.430993,311.636818 892.76323,311.636818 C896.092038,311.636818 898.801029,314.331962 898.806362,317.66608 C898.804457,317.698332 898.810172,317.728687 898.810172,317.76056 C898.810553,317.813681 898.810933,317.866802 898.817029,317.919165 C898.821981,317.968492 898.832267,318.015921 898.842172,318.06411 C898.851696,318.110781 898.861601,318.156693 898.875696,318.202225 C898.890935,318.251552 898.910744,318.298223 898.930554,318.345273 C898.948459,318.387011 898.965983,318.428749 898.987698,318.46897 C899.011698,318.512984 899.039127,318.554722 899.067318,318.596081 C899.093604,318.635543 899.119509,318.674245 899.149605,318.711051 C899.180462,318.748236 899.214368,318.782385 899.248654,318.816914 C899.28294,318.851443 899.316464,318.885971 899.354179,318.917465 C899.392656,318.949717 899.434942,318.977036 899.476467,319.005115 C899.515324,319.031296 899.55342,319.058616 899.594944,319.081382 C899.643707,319.108322 899.695898,319.128432 899.747708,319.15006 C899.78009,319.16334 899.808662,319.181553 899.842186,319.192557 C902.300506,320.015178 903.952338,322.306601 903.952338,324.894365 C903.952338,328.213305 901.241444,330.913382 897.909207,330.913382 Z M901.805642,316.720901 C901.334397,312.165753 897.458915,308.601317 892.76323,308.601317 C888.110213,308.601317 884.264445,312.102387 883.736438,316.597584 C880.470487,318.01668 878.266647,321.282878 878.266647,324.894365 C878.266647,325.047657 878.270838,325.201709 878.278457,325.355002 C878.279981,325.388013 878.28379,325.420644 878.285695,325.453276 C878.292933,325.570143 878.300171,325.68701 878.3116,325.802359 C878.311981,325.804635 878.312743,325.806532 878.312743,325.808809 C878.774845,330.373442 882.654899,333.948882 887.357441,333.948882 L891.239399,333.948882 L891.239399,343.480353 C891.239399,344.31853 891.921695,344.998103 892.76323,344.998103 C893.604766,344.998103 894.287061,344.31853 894.287061,343.480353 L894.287061,333.948882 L897.909207,333.948882 C902.921848,333.948882 907,329.887004 907,324.894365 C907,321.361801 904.949305,318.202225 901.805642,316.720901 Z"" id=""Fill-1"" fill=""#5591AA""></path>
</g>
</svg>";

		private const string CommunityChildSvg = @"<svg viewbox=""0 0 82 75"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"">
    <g id = ""Design-Elements"" stroke=""none"" stroke-width=""1"" fill=""none"" fill-rule=""evenodd"" transform=""translate(-825.000000, -428.000000)"" fill-opacity=""0.0700000003"">
    <path d = ""M858.379894,470.983821 C858.379894,469.825398 859.323145,468.88629 860.486209,468.88629 C861.649654,468.88629 862.592905,469.825398 862.592905,470.983821 C862.592905,472.142623 861.649654,473.081731 860.486209,473.081731 C859.323145,473.081731 858.379894,472.142623 858.379894,470.983821 Z M841.057367,499.962603 L836.399016,499.962603 L837.636367,497.334239 L841.051652,497.334239 C841.054319,497.334239 841.056224,497.334998 841.05889,497.334998 C841.061557,497.334998 841.063843,497.334239 841.06651,497.334239 L854.363076,497.334239 L866.609723,497.334239 L879.915051,497.334239 L883.336432,497.334239 L884.573783,499.962603 L841.057367,499.962603 Z M830.430552,476.486044 L839.533536,476.486044 L839.533536,494.298739 L836.667972,494.298739 C836.076726,494.298739 835.539195,494.639474 835.288524,495.172204 L833.032874,499.962603 L830.430552,499.962603 L830.430552,476.486044 Z M846.146199,465.489186 L846.146199,494.298739 L842.582721,494.298739 L842.582721,474.967156 C842.582721,474.961844 842.581197,474.95767 842.581197,474.952358 L842.581197,465.489186 L846.146199,465.489186 Z M850.032349,459.196594 C850.033111,459.196215 850.033873,459.195835 850.034254,459.195456 L860.486209,454.479806 L878.159598,462.453686 L842.813201,462.453686 L850.032349,459.196594 Z M850.96379,446.703234 L853.440015,446.703234 L853.440015,454.326514 L850.96379,455.443578 L850.96379,446.703234 Z M860.27592,435.693855 C860.344874,435.70372 860.414208,435.715103 860.486209,435.715103 C860.558591,435.715103 860.627544,435.70372 860.696878,435.693855 C865.335038,435.795544 869.167854,439.208584 869.888626,443.652557 L851.084173,443.652557 C851.804564,439.208584 855.63776,435.795544 860.27592,435.693855 Z M862.011563,446.703234 L864.487788,446.703234 L864.487788,452.95257 L862.011563,451.835506 L862.011563,446.703234 Z M858.963902,446.703234 L858.963902,451.833988 L856.487677,452.951432 L856.487677,446.703234 L858.963902,446.703234 Z M870.011675,455.445095 L867.53545,454.328031 L867.53545,446.703234 L870.011675,446.703234 L870.011675,455.445095 Z M855.887288,494.298739 L865.085892,494.298739 L865.085892,479.514335 L855.887288,479.514335 L855.887288,494.298739 Z M871.821986,494.298739 L868.133554,494.298739 L868.133554,477.996585 C868.133554,477.158408 867.451258,476.478835 866.609723,476.478835 L854.363076,476.478835 C853.52154,476.478835 852.839245,477.158408 852.839245,477.996585 L852.839245,494.298739 L849.193861,494.298739 L849.193861,465.489186 L871.821986,465.489186 L871.821986,494.298739 Z M885.684274,495.172204 C885.433604,494.639474 884.896073,494.298739 884.304827,494.298739 L881.438882,494.298739 L881.438882,492.889887 C881.438882,492.05171 880.756587,491.372137 879.915051,491.372137 C879.073516,491.372137 878.39122,492.05171 878.39122,492.889887 L878.39122,494.298739 L874.869647,494.298739 L874.869647,465.489186 L878.39122,465.489186 L878.39122,472.6708 C878.39122,473.508977 879.073516,474.18855 879.915051,474.18855 C880.756587,474.18855 881.438882,473.508977 881.438882,472.6708 L881.438882,465.489186 L885.216458,465.489186 C885.934183,465.489186 886.554763,464.990226 886.706003,464.291681 C886.857624,463.592757 886.499143,462.883589 885.845419,462.588766 L873.059336,456.820177 L873.059336,446.703234 L873.345817,446.703234 C874.187352,446.703234 874.869647,446.023662 874.869647,445.185484 C874.869647,444.347307 874.187352,443.667734 873.345817,443.667734 L872.964097,443.667734 C872.276468,437.967444 867.730881,433.436201 862.01004,432.744107 L862.01004,429.51775 C862.01004,428.679573 861.327744,428 860.486209,428 C859.644673,428 858.962378,428.679573 858.962378,429.51775 L858.962378,432.744107 C853.241917,433.436201 848.69633,437.967444 848.008321,443.667734 L847.62622,443.667734 C846.784685,443.667734 846.102389,444.347307 846.102389,445.185484 C846.102389,446.023662 846.784685,446.703234 847.62622,446.703234 L847.916129,446.703234 L847.916129,456.818659 L835.127379,462.588766 C834.473656,462.883589 834.115175,463.592757 834.266415,464.291681 C834.418036,464.990226 835.038235,465.489186 835.755959,465.489186 L839.533536,465.489186 L839.533536,473.449406 L828.906721,473.449406 C828.902912,473.449406 828.899102,473.450544 828.895292,473.450544 L826.523831,473.450544 C825.682295,473.450544 825,474.130117 825,474.968294 C825,475.806472 825.682295,476.486044 826.523831,476.486044 L827.38289,476.486044 L827.38289,499.962603 L826.523831,499.962603 C825.682295,499.962603 825,500.642175 825,501.480353 C825,502.31853 825.682295,502.998103 826.523831,502.998103 L828.888054,502.998103 C828.89453,502.998103 828.900245,503 828.906721,503 L841.05889,503 C841.065367,503 841.071081,502.998103 841.077557,502.998103 L886.97153,502.998103 C887.492681,502.998103 887.97764,502.732876 888.257644,502.294626 C888.537266,501.855996 888.572315,501.306191 888.350978,500.836068 L885.684274,495.172204 Z M897.909207,488.913382 L894.287061,488.913382 L894.287061,487.060968 L897.194149,484.16548 C897.789205,483.573178 897.789205,482.612063 897.194149,482.019382 C896.599474,481.426321 895.633746,481.426321 895.039071,482.019382 L894.287061,482.768771 L894.287061,476.779729 C894.287061,475.941551 893.604766,475.261979 892.76323,475.261979 C891.921695,475.261979 891.239399,475.941551 891.239399,476.779729 L891.239399,480.289147 L889.765093,478.820723 C889.170418,478.228042 888.20469,478.228042 887.610396,478.820723 C887.01496,479.413405 887.01496,480.37452 887.610396,480.967201 L891.239399,484.581723 L891.239399,488.913382 L887.357441,488.913382 C884.025204,488.913382 881.314309,486.213305 881.314309,482.894365 C881.314309,480.248926 883.088429,477.877442 885.629416,477.126914 C886.082756,476.993352 886.419904,476.665139 886.592097,476.262935 C886.596287,476.25307 886.600478,476.242825 886.605049,476.232959 C886.634764,476.15821 886.658383,476.082323 886.676288,476.0034 C886.682383,475.977598 886.688098,475.952555 886.692669,475.926374 C886.703717,475.862249 886.709431,475.798124 886.712098,475.732102 C886.713622,475.7063 886.720098,475.682016 886.720098,475.655835 C886.720098,472.336895 889.430993,469.636818 892.76323,469.636818 C896.092038,469.636818 898.801029,472.331962 898.806362,475.66608 C898.804457,475.698332 898.810172,475.728687 898.810172,475.76056 C898.810553,475.813681 898.810933,475.866802 898.817029,475.919165 C898.821981,475.968492 898.832267,476.015921 898.842172,476.06411 C898.851696,476.110781 898.861601,476.156693 898.875696,476.202225 C898.890935,476.251552 898.910744,476.298223 898.930554,476.345273 C898.948459,476.387011 898.965983,476.428749 898.987698,476.46897 C899.011698,476.512984 899.039127,476.554722 899.067318,476.596081 C899.093604,476.635543 899.119509,476.674245 899.149605,476.711051 C899.180462,476.748236 899.214368,476.782385 899.248654,476.816914 C899.28294,476.851443 899.316464,476.885971 899.354179,476.917465 C899.392656,476.949717 899.434942,476.977036 899.476467,477.005115 C899.515324,477.031296 899.55342,477.058616 899.594944,477.081382 C899.643707,477.108322 899.695898,477.128432 899.747708,477.15006 C899.78009,477.16334 899.808662,477.181553 899.842186,477.192557 C902.300506,478.015178 903.952338,480.306601 903.952338,482.894365 C903.952338,486.213305 901.241444,488.913382 897.909207,488.913382 Z M901.805642,474.720901 C901.334397,470.165753 897.458915,466.601317 892.76323,466.601317 C888.110213,466.601317 884.264445,470.102387 883.736438,474.597584 C880.470487,476.01668 878.266647,479.282878 878.266647,482.894365 C878.266647,483.047657 878.270838,483.201709 878.278457,483.355002 C878.279981,483.388013 878.28379,483.420644 878.285695,483.453276 C878.292933,483.570143 878.300171,483.68701 878.3116,483.802359 C878.311981,483.804635 878.312743,483.806532 878.312743,483.808809 C878.774845,488.373442 882.654899,491.948882 887.357441,491.948882 L891.239399,491.948882 L891.239399,501.480353 C891.239399,502.31853 891.921695,502.998103 892.76323,502.998103 C893.604766,502.998103 894.287061,502.31853 894.287061,501.480353 L894.287061,491.948882 L897.909207,491.948882 C902.921848,491.948882 907,487.887004 907,482.894365 C907,479.361801 904.949305,476.202225 901.805642,474.720901 Z"" id=""Fill-1"" fill=""#231F20"" style=""mix-blend-mode: multiply;""></path>
    </g>
    </svg>";

		private const string LeadershipParentSvg = @"<svg height=""40px"" viewbox=""0 0 64 75"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"">
<g id = ""Design-Elements"" stroke=""none"" stroke-width=""1"" fill=""none"" fill-rule=""evenodd"" transform=""translate(-1011.000000, -270.000000)"">
<path d = ""M1058.26911,335.279809 C1058.26911,336.106733 1057.59601,336.777181 1056.76581,336.777181 L1038.53539,336.777181 L1038.53539,343.502628 C1038.53539,344.329552 1037.86229,345 1037.03209,345 L1017.70464,345 C1016.87444,345 1016.20134,344.329552 1016.20134,343.502628 C1016.20134,342.675704 1016.87444,342.005256 1017.70464,342.005256 L1035.5288,342.005256 L1035.5288,335.279809 C1035.5288,334.452885 1036.2019,333.782437 1037.03209,333.782437 L1056.76581,333.782437 C1057.59601,333.782437 1058.26911,334.452885 1058.26911,335.279809 Z M1023.68135,317.433005 C1024.51155,317.433005 1025.18464,318.103453 1025.18464,318.930377 L1025.18464,338.115083 C1025.18464,338.942007 1024.51155,339.612455 1023.68135,339.612455 C1022.85116,339.612455 1022.17806,338.942007 1022.17806,338.115083 L1022.17806,318.930377 C1022.17806,318.103453 1022.85116,317.433005 1023.68135,317.433005 Z M1030.93136,320.982526 C1031.75666,321.072742 1032.35197,321.81207 1032.26139,322.634501 L1030.53449,338.279045 C1030.44993,339.045325 1029.79863,339.612455 1029.04172,339.612455 C1028.98685,339.612455 1028.9316,339.60946 1028.87598,339.603471 C1028.0503,339.513254 1027.45499,338.773552 1027.54557,337.951495 L1029.27285,322.306951 C1029.36342,321.484894 1030.10868,320.892683 1030.93136,320.982526 Z M1025.08468,298.127761 L1025.08468,308.588402 C1025.08468,310.134439 1025.94118,311.535979 1027.32007,312.246482 L1037.29517,317.383966 C1037.64431,317.563651 1037.90851,317.872484 1038.03178,318.244206 L1041.83624,329.710333 C1042.09706,330.495705 1041.669,331.342095 1040.8809,331.601889 C1040.72418,331.653174 1040.56521,331.67788 1040.40886,331.67788 C1039.77786,331.67788 1039.19045,331.279205 1038.98186,330.649934 L1035.36945,319.763665 L1025.93892,314.90619 C1023.55771,313.679842 1022.07809,311.258966 1022.07809,308.588402 L1022.07809,298.127761 C1022.07809,297.300837 1022.75119,296.630389 1023.58138,296.630389 C1024.41158,296.630389 1025.08468,297.300837 1025.08468,298.127761 Z M1069.37806,284.56419 C1069.91286,285.168379 1070.43074,285.835833 1070.86219,286.459863 C1068.37424,286.05969 1065.81263,286.131564 1063.34948,286.675485 L1063.34948,285.465608 C1063.45283,285.497801 1063.55694,285.527749 1063.65991,285.562188 C1063.81626,285.614222 1063.97748,285.640052 1064.13796,285.640052 C1064.44914,285.640052 1064.75694,285.543846 1065.01588,285.358171 C1065.40862,285.076665 1065.64125,284.624459 1065.64125,284.14268 L1065.64125,280.127851 C1067.5587,279.894635 1069.50396,279.987846 1071.38458,280.411603 C1070.90202,281.041996 1070.19623,281.818758 1069.4848,282.474233 C1068.88573,283.026389 1068.838,283.954759 1069.37806,284.56419 Z M1058.3127,281.704583 C1056.86165,281.704583 1055.41022,281.861433 1053.99149,282.174758 L1053.99149,276.061737 C1056.81166,275.317543 1059.81336,275.317543 1062.63467,276.061362 L1062.63467,282.175133 C1062.49787,282.144811 1062.35919,282.123099 1062.22201,282.095772 C1062.1679,282.081921 1062.11303,282.071814 1062.05703,282.063953 C1060.82207,281.82924 1059.56833,281.704583 1058.3127,281.704583 Z M1075,279.448418 C1075,278.805671 1074.58772,278.234049 1073.97588,278.029284 C1071.29589,277.131609 1068.44715,276.831012 1065.64125,277.119256 L1065.64125,274.947692 C1065.64125,274.304196 1065.2286,273.732574 1064.61601,273.528183 C1061.20128,272.386811 1057.49754,272.208998 1053.99149,272.984263 L1053.99149,271.497372 C1053.99149,270.670448 1053.31839,270 1052.48819,270 C1051.658,270 1050.9849,270.670448 1050.9849,271.497372 L1050.9849,274.94582 C1050.9849,274.946569 1050.9849,274.947317 1050.9849,274.948066 L1050.9849,284.142305 C1050.9849,284.143054 1050.9849,284.144177 1050.9849,284.144926 L1050.9849,290.62106 L1043.88899,294.510858 L1036.07976,289.335192 C1036.07901,289.334443 1036.07825,289.334069 1036.0775,289.333694 L1036.07111,289.329202 C1036.05232,289.316849 1036.03165,289.309736 1036.01248,289.298506 C1035.94784,289.2592 1035.88245,289.221766 1035.8118,289.192567 C1035.76369,289.172727 1035.71371,289.161871 1035.66447,289.147272 C1035.61975,289.133795 1035.57728,289.11695 1035.53106,289.107591 C1035.45063,289.091869 1035.36945,289.086254 1035.28865,289.083633 C1035.27136,289.082885 1035.25558,289.078392 1035.23829,289.078392 L1035.23228,289.078392 L1035.22626,289.078392 L1023.21458,289.078392 L1022.46293,289.078392 L1022.08035,289.078392 C1018.76634,289.078392 1015.80034,291.29076 1014.86755,294.45845 L1011.06121,307.387136 C1010.82745,308.180743 1011.2837,309.012907 1012.08082,309.245374 C1012.22175,309.286552 1012.36419,309.306392 1012.50437,309.306392 C1013.15455,309.306392 1013.75398,308.88301 1013.94603,308.230156 L1017.75237,295.301471 C1018.31234,293.400557 1020.09187,292.073137 1022.08035,292.073137 L1022.46293,292.073137 L1023.21458,292.073137 L1034.78392,292.073137 L1042.9825,297.5071 C1043.44852,297.816307 1044.04909,297.841763 1044.53991,297.572236 L1055.26252,291.694302 L1055.26252,293.568263 C1055.26252,295.11093 1054.40865,296.511348 1053.03389,297.222225 L1043.76008,302.021303 L1035.84111,298.567239 C1035.37622,298.36472 1034.84029,298.408892 1034.41561,298.685532 C1033.99093,298.961797 1033.735,299.433095 1033.735,299.938832 L1033.735,309.605492 C1033.735,310.109732 1033.9898,310.580282 1034.41261,310.856921 L1041.42847,315.44749 L1044.52262,330.481106 C1044.66882,331.189363 1045.29494,331.67788 1045.9936,331.67788 C1046.09394,331.67788 1046.19541,331.667773 1046.29726,331.647184 C1047.11054,331.480976 1047.63482,330.68924 1047.46795,329.879162 L1044.24865,314.236864 C1044.16822,313.846799 1043.93521,313.505024 1043.60148,313.286407 L1036.74158,308.79766 L1036.74158,302.229063 L1043.21213,305.051609 C1043.62816,305.233166 1044.10471,305.217443 1044.50797,305.008934 L1050.9849,301.657441 L1050.9849,330.179385 C1050.9849,331.006309 1051.658,331.676757 1052.48819,331.676757 C1053.31839,331.676757 1053.99149,331.006309 1053.99149,330.179385 L1053.99149,300.101672 L1054.41993,299.88006 C1056.79438,298.651467 1058.26911,296.233211 1058.26911,293.568263 L1058.26911,289.161497 C1058.26911,288.632176 1057.98837,288.141786 1057.53099,287.872259 C1057.07286,287.602732 1056.50687,287.594122 1056.04085,287.849799 L1053.99149,288.973202 L1053.99149,285.259719 C1056.05927,284.714301 1058.22326,284.565313 1060.3429,284.819492 L1060.3429,288.642283 C1060.3429,289.124062 1060.57553,289.576269 1060.96827,289.857775 C1061.22721,290.043449 1061.53501,290.139655 1061.84657,290.139655 C1062.00667,290.139655 1062.1679,290.1142 1062.32386,290.062166 C1065.77204,288.911435 1069.57086,288.91181 1073.01941,290.062166 C1073.47829,290.215272 1073.98227,290.138906 1074.37463,289.857775 C1074.76737,289.576269 1075,289.124062 1075,288.642283 C1075,287.096995 1073.59818,285.020514 1072.54512,283.678869 C1074.65499,281.48447 1075,280.11138 1075,279.448418 Z M1026.51356,277.585687 C1026.51356,275.959541 1027.84134,274.636987 1029.47354,274.636987 L1029.93242,274.636987 C1031.56462,274.636987 1032.8924,275.959541 1032.8924,277.585687 L1032.8924,280.633588 C1032.8924,282.25936 1031.56462,283.581914 1029.93242,283.581914 L1029.47354,283.581914 C1027.84134,283.581914 1026.51356,282.25936 1026.51356,280.633588 L1026.51356,277.585687 Z M1029.47354,286.576658 L1029.93242,286.576658 C1033.22237,286.576658 1035.89899,283.910587 1035.89899,280.633588 L1035.89899,277.585687 C1035.89899,274.308314 1033.22237,271.642243 1029.93242,271.642243 L1029.47354,271.642243 C1026.18358,271.642243 1023.50697,274.308314 1023.50697,277.585687 L1023.50697,280.633588 C1023.50697,283.910587 1026.18358,286.576658 1029.47354,286.576658 Z"" id=""Fill-1"" fill=""#BDA15F""></path>
</g>
</svg>";

		private const string LeadershipChildSvg = @"<svg width=""64px"" height=""75px"" viewbox=""0 0 64 75"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"">
    <g id = ""Design-Elements"" stroke=""none"" stroke-width=""1"" fill=""none"" fill-rule=""evenodd"" transform=""translate(-1011.000000, -428.000000)"" fill-opacity=""0.07"">
    <path d = ""M1058.26911,493.279809 C1058.26911,494.106733 1057.59601,494.777181 1056.76581,494.777181 L1038.53539,494.777181 L1038.53539,501.502628 C1038.53539,502.329552 1037.86229,503 1037.03209,503 L1017.70464,503 C1016.87444,503 1016.20134,502.329552 1016.20134,501.502628 C1016.20134,500.675704 1016.87444,500.005256 1017.70464,500.005256 L1035.5288,500.005256 L1035.5288,493.279809 C1035.5288,492.452885 1036.2019,491.782437 1037.03209,491.782437 L1056.76581,491.782437 C1057.59601,491.782437 1058.26911,492.452885 1058.26911,493.279809 Z M1023.68135,475.433005 C1024.51155,475.433005 1025.18464,476.103453 1025.18464,476.930377 L1025.18464,496.115083 C1025.18464,496.942007 1024.51155,497.612455 1023.68135,497.612455 C1022.85116,497.612455 1022.17806,496.942007 1022.17806,496.115083 L1022.17806,476.930377 C1022.17806,476.103453 1022.85116,475.433005 1023.68135,475.433005 Z M1030.93136,478.982526 C1031.75666,479.072742 1032.35197,479.81207 1032.26139,480.634501 L1030.53449,496.279045 C1030.44993,497.045325 1029.79863,497.612455 1029.04172,497.612455 C1028.98685,497.612455 1028.9316,497.60946 1028.87598,497.603471 C1028.0503,497.513254 1027.45499,496.773552 1027.54557,495.951495 L1029.27285,480.306951 C1029.36342,479.484894 1030.10868,478.892683 1030.93136,478.982526 Z M1025.08468,456.127761 L1025.08468,466.588402 C1025.08468,468.134439 1025.94118,469.535979 1027.32007,470.246482 L1037.29517,475.383966 C1037.64431,475.563651 1037.90851,475.872484 1038.03178,476.244206 L1041.83624,487.710333 C1042.09706,488.495705 1041.669,489.342095 1040.8809,489.601889 C1040.72418,489.653174 1040.56521,489.67788 1040.40886,489.67788 C1039.77786,489.67788 1039.19045,489.279205 1038.98186,488.649934 L1035.36945,477.763665 L1025.93892,472.90619 C1023.55771,471.679842 1022.07809,469.258966 1022.07809,466.588402 L1022.07809,456.127761 C1022.07809,455.300837 1022.75119,454.630389 1023.58138,454.630389 C1024.41158,454.630389 1025.08468,455.300837 1025.08468,456.127761 Z M1069.37806,442.56419 C1069.91286,443.168379 1070.43074,443.835833 1070.86219,444.459863 C1068.37424,444.05969 1065.81263,444.131564 1063.34948,444.675485 L1063.34948,443.465608 C1063.45283,443.497801 1063.55694,443.527749 1063.65991,443.562188 C1063.81626,443.614222 1063.97748,443.640052 1064.13796,443.640052 C1064.44914,443.640052 1064.75694,443.543846 1065.01588,443.358171 C1065.40862,443.076665 1065.64125,442.624459 1065.64125,442.14268 L1065.64125,438.127851 C1067.5587,437.894635 1069.50396,437.987846 1071.38458,438.411603 C1070.90202,439.041996 1070.19623,439.818758 1069.4848,440.474233 C1068.88573,441.026389 1068.838,441.954759 1069.37806,442.56419 Z M1058.3127,439.704583 C1056.86165,439.704583 1055.41022,439.861433 1053.99149,440.174758 L1053.99149,434.061737 C1056.81166,433.317543 1059.81336,433.317543 1062.63467,434.061362 L1062.63467,440.175133 C1062.49787,440.144811 1062.35919,440.123099 1062.22201,440.095772 C1062.1679,440.081921 1062.11303,440.071814 1062.05703,440.063953 C1060.82207,439.82924 1059.56833,439.704583 1058.3127,439.704583 Z M1075,437.448418 C1075,436.805671 1074.58772,436.234049 1073.97588,436.029284 C1071.29589,435.131609 1068.44715,434.831012 1065.64125,435.119256 L1065.64125,432.947692 C1065.64125,432.304196 1065.2286,431.732574 1064.61601,431.528183 C1061.20128,430.386811 1057.49754,430.208998 1053.99149,430.984263 L1053.99149,429.497372 C1053.99149,428.670448 1053.31839,428 1052.48819,428 C1051.658,428 1050.9849,428.670448 1050.9849,429.497372 L1050.9849,432.94582 C1050.9849,432.946569 1050.9849,432.947317 1050.9849,432.948066 L1050.9849,442.142305 C1050.9849,442.143054 1050.9849,442.144177 1050.9849,442.144926 L1050.9849,448.62106 L1043.88899,452.510858 L1036.07976,447.335192 C1036.07901,447.334443 1036.07825,447.334069 1036.0775,447.333694 L1036.07111,447.329202 C1036.05232,447.316849 1036.03165,447.309736 1036.01248,447.298506 C1035.94784,447.2592 1035.88245,447.221766 1035.8118,447.192567 C1035.76369,447.172727 1035.71371,447.161871 1035.66447,447.147272 C1035.61975,447.133795 1035.57728,447.11695 1035.53106,447.107591 C1035.45063,447.091869 1035.36945,447.086254 1035.28865,447.083633 C1035.27136,447.082885 1035.25558,447.078392 1035.23829,447.078392 L1035.23228,447.078392 L1035.22626,447.078392 L1023.21458,447.078392 L1022.46293,447.078392 L1022.08035,447.078392 C1018.76634,447.078392 1015.80034,449.29076 1014.86755,452.45845 L1011.06121,465.387136 C1010.82745,466.180743 1011.2837,467.012907 1012.08082,467.245374 C1012.22175,467.286552 1012.36419,467.306392 1012.50437,467.306392 C1013.15455,467.306392 1013.75398,466.88301 1013.94603,466.230156 L1017.75237,453.301471 C1018.31234,451.400557 1020.09187,450.073137 1022.08035,450.073137 L1022.46293,450.073137 L1023.21458,450.073137 L1034.78392,450.073137 L1042.9825,455.5071 C1043.44852,455.816307 1044.04909,455.841763 1044.53991,455.572236 L1055.26252,449.694302 L1055.26252,451.568263 C1055.26252,453.11093 1054.40865,454.511348 1053.03389,455.222225 L1043.76008,460.021303 L1035.84111,456.567239 C1035.37622,456.36472 1034.84029,456.408892 1034.41561,456.685532 C1033.99093,456.961797 1033.735,457.433095 1033.735,457.938832 L1033.735,467.605492 C1033.735,468.109732 1033.9898,468.580282 1034.41261,468.856921 L1041.42847,473.44749 L1044.52262,488.481106 C1044.66882,489.189363 1045.29494,489.67788 1045.9936,489.67788 C1046.09394,489.67788 1046.19541,489.667773 1046.29726,489.647184 C1047.11054,489.480976 1047.63482,488.68924 1047.46795,487.879162 L1044.24865,472.236864 C1044.16822,471.846799 1043.93521,471.505024 1043.60148,471.286407 L1036.74158,466.79766 L1036.74158,460.229063 L1043.21213,463.051609 C1043.62816,463.233166 1044.10471,463.217443 1044.50797,463.008934 L1050.9849,459.657441 L1050.9849,488.179385 C1050.9849,489.006309 1051.658,489.676757 1052.48819,489.676757 C1053.31839,489.676757 1053.99149,489.006309 1053.99149,488.179385 L1053.99149,458.101672 L1054.41993,457.88006 C1056.79438,456.651467 1058.26911,454.233211 1058.26911,451.568263 L1058.26911,447.161497 C1058.26911,446.632176 1057.98837,446.141786 1057.53099,445.872259 C1057.07286,445.602732 1056.50687,445.594122 1056.04085,445.849799 L1053.99149,446.973202 L1053.99149,443.259719 C1056.05927,442.714301 1058.22326,442.565313 1060.3429,442.819492 L1060.3429,446.642283 C1060.3429,447.124062 1060.57553,447.576269 1060.96827,447.857775 C1061.22721,448.043449 1061.53501,448.139655 1061.84657,448.139655 C1062.00667,448.139655 1062.1679,448.1142 1062.32386,448.062166 C1065.77204,446.911435 1069.57086,446.91181 1073.01941,448.062166 C1073.47829,448.215272 1073.98227,448.138906 1074.37463,447.857775 C1074.76737,447.576269 1075,447.124062 1075,446.642283 C1075,445.096995 1073.59818,443.020514 1072.54512,441.678869 C1074.65499,439.48447 1075,438.11138 1075,437.448418 Z M1026.51356,435.585687 C1026.51356,433.959541 1027.84134,432.636987 1029.47354,432.636987 L1029.93242,432.636987 C1031.56462,432.636987 1032.8924,433.959541 1032.8924,435.585687 L1032.8924,438.633588 C1032.8924,440.25936 1031.56462,441.581914 1029.93242,441.581914 L1029.47354,441.581914 C1027.84134,441.581914 1026.51356,440.25936 1026.51356,438.633588 L1026.51356,435.585687 Z M1029.47354,444.576658 L1029.93242,444.576658 C1033.22237,444.576658 1035.89899,441.910587 1035.89899,438.633588 L1035.89899,435.585687 C1035.89899,432.308314 1033.22237,429.642243 1029.93242,429.642243 L1029.47354,429.642243 C1026.18358,429.642243 1023.50697,432.308314 1023.50697,435.585687 L1023.50697,438.633588 C1023.50697,441.910587 1026.18358,444.576658 1029.47354,444.576658 Z"" id=""Fill-1"" fill=""#231F20"" style=""mix-blend-mode: multiply;""></path>
    </g>
    </svg>";

		private const string FinanceParentSvg = @"<svg height=""40px"" viewbox=""0 0 82 75"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"">
<g id = ""Design-Elements"" stroke=""none"" stroke-width=""1"" fill=""none"" fill-rule=""evenodd"" transform=""translate(-1177.000000, -270.000000)"">
<path d = ""M1232.57778,302.855141 C1232.57778,303.439417 1231.74749,303.913026 1230.72284,303.913026 C1229.69859,303.913026 1228.8683,303.439417 1228.8683,302.855141 C1228.8683,302.270864 1229.69859,301.797255 1230.72284,301.797255 C1231.74749,301.797255 1232.57778,302.270864 1232.57778,302.855141 Z M1202.76842,315.416094 C1202.76842,314.831817 1203.59871,314.358208 1204.62336,314.358208 C1205.64761,314.358208 1206.4779,314.831817 1206.4779,315.416094 C1206.4779,315.999974 1205.64761,316.473583 1204.62336,316.473583 C1203.59871,316.473583 1202.76842,315.999974 1202.76842,315.416094 Z M1198.99177,273.17326 C1206.01287,273.17326 1210.49938,275.657923 1210.51726,277.379019 L1210.51726,277.395679 C1210.51289,278.144172 1209.65955,279.037841 1208.12139,279.80934 C1206.12217,280.812883 1202.96238,281.606198 1198.99177,281.606198 C1195.02117,281.606198 1191.86137,280.812883 1189.86216,279.80934 C1188.45118,279.10329 1187.61652,278.290142 1187.48536,277.584091 C1187.48417,277.578538 1187.48457,277.572985 1187.48377,277.567432 L1187.48377,277.389729 C1187.48377,277.35403 1187.47542,277.320711 1187.47344,277.285408 C1187.47503,277.266369 1187.47463,277.246933 1187.47741,277.2271 C1187.74768,275.513539 1192.17537,273.17326 1198.99177,273.17326 Z M1198.99138,289.232732 C1192.21948,289.232732 1187.76756,286.89404 1187.48377,285.179686 L1187.48377,282.096864 L1187.48536,282.098054 C1187.70794,282.24085 1188.19562,282.505818 1188.19919,282.507801 C1188.30134,282.578406 1188.41223,282.634731 1188.52988,282.680347 L1188.53862,282.685107 C1191.16582,283.994077 1194.82244,284.779458 1198.99177,284.779458 C1203.15713,284.779458 1206.80977,283.998043 1209.43697,282.689073 C1209.44134,282.68709 1209.44492,282.68471 1209.44929,282.682727 C1209.57052,282.636318 1209.79309,282.503438 1209.79468,282.502644 C1210.04866,282.371747 1210.28713,282.233314 1210.51726,282.086551 L1210.51726,285.018246 C1210.51329,286.737757 1206.024,289.232732 1198.99138,289.232732 Z M1184.30411,306.689629 C1184.30411,307.565448 1185.01595,308.276259 1185.89394,308.276259 C1186.77192,308.276259 1187.48377,307.565448 1187.48377,306.689629 L1187.48377,304.987175 C1187.69442,305.118072 1187.91144,305.246192 1188.14156,305.368759 C1188.38004,305.496483 1188.6368,305.556775 1188.88998,305.556775 C1189.45755,305.556775 1190.00683,305.252539 1190.293,304.717844 C1190.70716,303.945155 1190.41502,302.983658 1189.64078,302.570737 C1188.35818,301.886503 1187.57201,301.083272 1187.48377,300.392691 L1187.48377,297.348741 C1188.98934,298.288026 1190.97464,299.032949 1193.34628,299.501005 C1193.45041,299.521631 1193.55415,299.531547 1193.65629,299.531547 C1194.39994,299.531547 1195.06449,299.00796 1195.21433,298.252327 C1195.38444,297.39277 1194.82442,296.558203 1193.96313,296.388037 C1189.91661,295.589169 1187.66223,293.976756 1187.48377,292.79194 L1187.48377,289.732124 C1190.1376,291.389756 1194.23738,292.405992 1198.99138,292.405992 C1203.17184,292.405992 1206.83958,291.61585 1209.46678,290.301327 C1209.57847,290.256902 1210.28356,289.857468 1210.51726,289.710704 L1210.51726,291.48416 C1210.51726,292.360377 1211.22911,293.07079 1212.1071,293.07079 C1212.98508,293.07079 1213.69693,292.360377 1213.69693,291.48416 L1213.69693,285.02023 C1213.69693,285.018643 1213.69733,285.017453 1213.69733,285.015866 C1213.69733,285.01547 1213.69693,285.014676 1213.69693,285.013883 L1213.69693,277.410752 C1213.69693,277.403612 1213.69772,277.396472 1213.69772,277.389729 C1213.69772,277.384969 1213.69693,277.380209 1213.69693,277.37545 L1213.69693,277.006161 C1213.69693,276.79633 1213.654,276.597208 1213.57968,276.413555 C1213.57769,276.404432 1213.5769,276.394912 1213.57451,276.386186 C1213.57054,276.386186 1213.57054,276.382219 1213.57054,276.382219 C1212.65241,272.681405 1206.69054,270 1198.99177,270 C1190.60938,270 1184.28582,273.177227 1184.28582,277.389729 C1184.28582,277.50952 1184.30411,306.689629 1184.30411,306.689629 Z M1205.57368,327.935794 L1182.00441,315.413317 L1198.72548,306.750317 L1201.26523,308.285382 L1193.90431,312.073461 C1193.37569,312.343188 1193.0458,312.886609 1193.0458,313.481595 C1193.0458,313.925851 1193.22863,314.338375 1193.54262,314.635868 C1193.50685,314.659668 1193.46313,314.679501 1193.41941,314.7033 C1192.89079,314.976994 1192.5609,315.520415 1192.5609,316.111434 C1192.5609,316.706421 1192.89079,317.249841 1193.41941,317.523535 L1203.85269,322.910144 C1204.08321,323.025175 1204.33361,323.084673 1204.58401,323.084673 C1204.83838,323.084673 1205.09275,323.025175 1205.32726,322.902211 C1206.46796,322.303258 1208.18895,322.271525 1208.90835,322.640417 C1209.37338,322.882378 1209.92187,322.878411 1210.38292,322.63645 L1218.19695,318.503279 L1220.77248,320.062143 L1205.57368,327.935794 Z M1230.42674,290.328697 L1253.99203,302.851174 L1238.18114,311.042151 L1235.43868,309.384123 L1242.25509,305.782473 C1242.77576,305.504813 1243.10168,304.965359 1243.10168,304.374339 C1243.0977,303.949915 1242.92679,303.549291 1242.63267,303.255765 C1243.14937,302.978105 1243.46734,302.442617 1243.46734,301.855564 C1243.46734,301.264544 1243.13745,300.72509 1242.6128,300.451396 L1232.56506,295.22345 C1232.10798,294.985456 1231.55949,294.985456 1231.09844,295.22345 C1230.03723,295.770838 1228.41162,295.778771 1227.72005,295.417813 C1227.26297,295.179818 1226.71448,295.179818 1226.2574,295.417813 L1218.72557,299.293156 L1216.13812,297.730326 L1230.42674,290.328697 Z M1239.15492,303.830918 L1232.27094,307.472234 L1221.91716,301.220912 L1227.07616,298.563307 C1228.47919,298.98773 1230.26378,298.920298 1231.76219,298.384811 L1239.298,302.307753 C1239.16684,302.625079 1239.09927,302.962238 1239.09927,303.30733 C1239.09927,303.485826 1239.11914,303.660355 1239.15492,303.830918 Z M1197.00051,314.048815 L1204.45682,310.209171 L1215.02523,316.59139 L1209.53634,319.490956 C1208.08164,319.062566 1206.20961,319.153797 1204.63965,319.74085 L1196.7978,315.690977 C1196.96474,315.333986 1197.05218,314.957161 1197.05218,314.568437 C1197.05218,314.389941 1197.03628,314.219378 1197.00051,314.048815 Z M1237.31468,329.332029 L1225.7884,335.396922 L1225.7884,320.276338 C1225.7884,319.721018 1225.49825,319.205363 1225.02131,318.915803 L1199.63168,303.588957 L1210.89167,298.273747 L1237.31468,314.227311 L1237.31468,329.332029 Z M1258.14149,311.121483 C1258.92051,310.716892 1259.22258,309.756981 1258.82114,308.979532 C1258.41574,308.202084 1257.45786,307.900624 1256.67487,308.305215 L1240.49435,316.686588 L1240.49435,313.422096 L1258.14149,304.279141 C1258.66614,304.005447 1258.99603,303.465993 1259,302.87894 C1259,302.28792 1258.67806,301.7445 1258.15739,301.470806 L1231.18191,287.135604 C1230.72085,286.889676 1230.16441,286.88571 1229.70336,287.127671 L1212.9505,295.806537 L1211.80582,295.116353 C1211.34875,294.842659 1210.78436,294.814893 1210.30343,295.040988 L1195.59748,301.982494 C1195.06886,302.232388 1194.7191,302.75201 1194.6873,303.335096 C1194.65948,303.918183 1194.9536,304.473503 1195.4544,304.774963 L1195.53786,304.826528 L1177.85892,313.98535 C1177.33428,314.259044 1177.00439,314.798498 1177.00041,315.385551 C1176.99644,315.976571 1177.32236,316.519992 1177.84303,316.793685 L1204.81851,331.128887 C1205.04903,331.255818 1205.30738,331.315316 1205.56573,331.315316 C1205.81613,331.315316 1206.06653,331.255818 1206.29705,331.13682 L1222.60873,322.688016 L1222.60873,325.952507 L1205.57368,334.778136 L1179.65543,321.006188 C1178.88039,320.593664 1177.91854,320.887191 1177.50519,321.660673 C1177.09183,322.434155 1177.38595,323.394066 1178.16099,323.80659 L1204.81851,337.971229 C1205.04903,338.09816 1205.30738,338.157658 1205.56573,338.157658 C1205.81613,338.157658 1206.06653,338.09816 1206.29705,337.979162 L1222.60873,329.530358 L1222.60873,332.794849 L1205.57368,341.620478 L1179.33747,327.677967 C1178.56243,327.265443 1177.60058,327.55897 1177.18722,328.332452 C1176.77386,329.105934 1177.06798,330.069812 1177.84303,330.478369 L1204.81851,344.813571 C1205.04903,344.940501 1205.30738,345 1205.56573,345 C1205.81613,345 1206.06653,344.940501 1206.29705,344.821504 L1222.60873,336.372699 L1222.60873,338.026761 C1222.60873,338.582082 1222.89888,339.097736 1223.37583,339.38333 C1223.6302,339.53406 1223.9124,339.613391 1224.19857,339.613391 C1224.45294,339.613391 1224.70731,339.549926 1224.93784,339.430929 L1239.64379,331.696107 C1240.16843,331.418447 1240.49435,330.878993 1240.49435,330.29194 L1240.49435,327.10678 L1258.14149,317.963825 C1258.92051,317.559234 1259.22258,316.599323 1258.82114,315.821874 C1258.41574,315.044426 1257.45786,314.742966 1256.67487,315.147557 L1240.49435,323.52893 L1240.49435,320.264438 L1258.14149,311.121483 Z"" id=""Fill-1"" fill=""#73AA56""></path>
</g>
</svg>";

		private const string FinanceChildSvg = @"<svg width=""82px"" height=""75px"" viewbox=""0 0 82 75"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"">
    <g id = ""Design-Elements"" stroke=""none"" stroke-width=""1"" fill=""none"" fill-rule=""evenodd"" transform=""translate(-1177.000000, -428.000000)"" fill-opacity=""0.0700000003"">
    <path d = ""M1232.57778,460.855141 C1232.57778,461.439417 1231.74749,461.913026 1230.72284,461.913026 C1229.69859,461.913026 1228.8683,461.439417 1228.8683,460.855141 C1228.8683,460.270864 1229.69859,459.797255 1230.72284,459.797255 C1231.74749,459.797255 1232.57778,460.270864 1232.57778,460.855141 Z M1202.76842,473.416094 C1202.76842,472.831817 1203.59871,472.358208 1204.62336,472.358208 C1205.64761,472.358208 1206.4779,472.831817 1206.4779,473.416094 C1206.4779,473.999974 1205.64761,474.473583 1204.62336,474.473583 C1203.59871,474.473583 1202.76842,473.999974 1202.76842,473.416094 Z M1198.99177,431.17326 C1206.01287,431.17326 1210.49938,433.657923 1210.51726,435.379019 L1210.51726,435.395679 C1210.51289,436.144172 1209.65955,437.037841 1208.12139,437.80934 C1206.12217,438.812883 1202.96238,439.606198 1198.99177,439.606198 C1195.02117,439.606198 1191.86137,438.812883 1189.86216,437.80934 C1188.45118,437.10329 1187.61652,436.290142 1187.48536,435.584091 C1187.48417,435.578538 1187.48457,435.572985 1187.48377,435.567432 L1187.48377,435.389729 C1187.48377,435.35403 1187.47542,435.320711 1187.47344,435.285408 C1187.47503,435.266369 1187.47463,435.246933 1187.47741,435.2271 C1187.74768,433.513539 1192.17537,431.17326 1198.99177,431.17326 Z M1198.99138,447.232732 C1192.21948,447.232732 1187.76756,444.89404 1187.48377,443.179686 L1187.48377,440.096864 L1187.48536,440.098054 C1187.70794,440.24085 1188.19562,440.505818 1188.19919,440.507801 C1188.30134,440.578406 1188.41223,440.634731 1188.52988,440.680347 L1188.53862,440.685107 C1191.16582,441.994077 1194.82244,442.779458 1198.99177,442.779458 C1203.15713,442.779458 1206.80977,441.998043 1209.43697,440.689073 C1209.44134,440.68709 1209.44492,440.68471 1209.44929,440.682727 C1209.57052,440.636318 1209.79309,440.503438 1209.79468,440.502644 C1210.04866,440.371747 1210.28713,440.233314 1210.51726,440.086551 L1210.51726,443.018246 C1210.51329,444.737757 1206.024,447.232732 1198.99138,447.232732 Z M1184.30411,464.689629 C1184.30411,465.565448 1185.01595,466.276259 1185.89394,466.276259 C1186.77192,466.276259 1187.48377,465.565448 1187.48377,464.689629 L1187.48377,462.987175 C1187.69442,463.118072 1187.91144,463.246192 1188.14156,463.368759 C1188.38004,463.496483 1188.6368,463.556775 1188.88998,463.556775 C1189.45755,463.556775 1190.00683,463.252539 1190.293,462.717844 C1190.70716,461.945155 1190.41502,460.983658 1189.64078,460.570737 C1188.35818,459.886503 1187.57201,459.083272 1187.48377,458.392691 L1187.48377,455.348741 C1188.98934,456.288026 1190.97464,457.032949 1193.34628,457.501005 C1193.45041,457.521631 1193.55415,457.531547 1193.65629,457.531547 C1194.39994,457.531547 1195.06449,457.00796 1195.21433,456.252327 C1195.38444,455.39277 1194.82442,454.558203 1193.96313,454.388037 C1189.91661,453.589169 1187.66223,451.976756 1187.48377,450.79194 L1187.48377,447.732124 C1190.1376,449.389756 1194.23738,450.405992 1198.99138,450.405992 C1203.17184,450.405992 1206.83958,449.61585 1209.46678,448.301327 C1209.57847,448.256902 1210.28356,447.857468 1210.51726,447.710704 L1210.51726,449.48416 C1210.51726,450.360377 1211.22911,451.07079 1212.1071,451.07079 C1212.98508,451.07079 1213.69693,450.360377 1213.69693,449.48416 L1213.69693,443.02023 C1213.69693,443.018643 1213.69733,443.017453 1213.69733,443.015866 C1213.69733,443.01547 1213.69693,443.014676 1213.69693,443.013883 L1213.69693,435.410752 C1213.69693,435.403612 1213.69772,435.396472 1213.69772,435.389729 C1213.69772,435.384969 1213.69693,435.380209 1213.69693,435.37545 L1213.69693,435.006161 C1213.69693,434.79633 1213.654,434.597208 1213.57968,434.413555 C1213.57769,434.404432 1213.5769,434.394912 1213.57451,434.386186 C1213.57054,434.386186 1213.57054,434.382219 1213.57054,434.382219 C1212.65241,430.681405 1206.69054,428 1198.99177,428 C1190.60938,428 1184.28582,431.177227 1184.28582,435.389729 C1184.28582,435.50952 1184.30411,464.689629 1184.30411,464.689629 Z M1205.57368,485.935794 L1182.00441,473.413317 L1198.72548,464.750317 L1201.26523,466.285382 L1193.90431,470.073461 C1193.37569,470.343188 1193.0458,470.886609 1193.0458,471.481595 C1193.0458,471.925851 1193.22863,472.338375 1193.54262,472.635868 C1193.50685,472.659668 1193.46313,472.679501 1193.41941,472.7033 C1192.89079,472.976994 1192.5609,473.520415 1192.5609,474.111434 C1192.5609,474.706421 1192.89079,475.249841 1193.41941,475.523535 L1203.85269,480.910144 C1204.08321,481.025175 1204.33361,481.084673 1204.58401,481.084673 C1204.83838,481.084673 1205.09275,481.025175 1205.32726,480.902211 C1206.46796,480.303258 1208.18895,480.271525 1208.90835,480.640417 C1209.37338,480.882378 1209.92187,480.878411 1210.38292,480.63645 L1218.19695,476.503279 L1220.77248,478.062143 L1205.57368,485.935794 Z M1230.42674,448.328697 L1253.99203,460.851174 L1238.18114,469.042151 L1235.43868,467.384123 L1242.25509,463.782473 C1242.77576,463.504813 1243.10168,462.965359 1243.10168,462.374339 C1243.0977,461.949915 1242.92679,461.549291 1242.63267,461.255765 C1243.14937,460.978105 1243.46734,460.442617 1243.46734,459.855564 C1243.46734,459.264544 1243.13745,458.72509 1242.6128,458.451396 L1232.56506,453.22345 C1232.10798,452.985456 1231.55949,452.985456 1231.09844,453.22345 C1230.03723,453.770838 1228.41162,453.778771 1227.72005,453.417813 C1227.26297,453.179818 1226.71448,453.179818 1226.2574,453.417813 L1218.72557,457.293156 L1216.13812,455.730326 L1230.42674,448.328697 Z M1239.15492,461.830918 L1232.27094,465.472234 L1221.91716,459.220912 L1227.07616,456.563307 C1228.47919,456.98773 1230.26378,456.920298 1231.76219,456.384811 L1239.298,460.307753 C1239.16684,460.625079 1239.09927,460.962238 1239.09927,461.30733 C1239.09927,461.485826 1239.11914,461.660355 1239.15492,461.830918 Z M1197.00051,472.048815 L1204.45682,468.209171 L1215.02523,474.59139 L1209.53634,477.490956 C1208.08164,477.062566 1206.20961,477.153797 1204.63965,477.74085 L1196.7978,473.690977 C1196.96474,473.333986 1197.05218,472.957161 1197.05218,472.568437 C1197.05218,472.389941 1197.03628,472.219378 1197.00051,472.048815 Z M1237.31468,487.332029 L1225.7884,493.396922 L1225.7884,478.276338 C1225.7884,477.721018 1225.49825,477.205363 1225.02131,476.915803 L1199.63168,461.588957 L1210.89167,456.273747 L1237.31468,472.227311 L1237.31468,487.332029 Z M1258.14149,469.121483 C1258.92051,468.716892 1259.22258,467.756981 1258.82114,466.979532 C1258.41574,466.202084 1257.45786,465.900624 1256.67487,466.305215 L1240.49435,474.686588 L1240.49435,471.422096 L1258.14149,462.279141 C1258.66614,462.005447 1258.99603,461.465993 1259,460.87894 C1259,460.28792 1258.67806,459.7445 1258.15739,459.470806 L1231.18191,445.135604 C1230.72085,444.889676 1230.16441,444.88571 1229.70336,445.127671 L1212.9505,453.806537 L1211.80582,453.116353 C1211.34875,452.842659 1210.78436,452.814893 1210.30343,453.040988 L1195.59748,459.982494 C1195.06886,460.232388 1194.7191,460.75201 1194.6873,461.335096 C1194.65948,461.918183 1194.9536,462.473503 1195.4544,462.774963 L1195.53786,462.826528 L1177.85892,471.98535 C1177.33428,472.259044 1177.00439,472.798498 1177.00041,473.385551 C1176.99644,473.976571 1177.32236,474.519992 1177.84303,474.793685 L1204.81851,489.128887 C1205.04903,489.255818 1205.30738,489.315316 1205.56573,489.315316 C1205.81613,489.315316 1206.06653,489.255818 1206.29705,489.13682 L1222.60873,480.688016 L1222.60873,483.952507 L1205.57368,492.778136 L1179.65543,479.006188 C1178.88039,478.593664 1177.91854,478.887191 1177.50519,479.660673 C1177.09183,480.434155 1177.38595,481.394066 1178.16099,481.80659 L1204.81851,495.971229 C1205.04903,496.09816 1205.30738,496.157658 1205.56573,496.157658 C1205.81613,496.157658 1206.06653,496.09816 1206.29705,495.979162 L1222.60873,487.530358 L1222.60873,490.794849 L1205.57368,499.620478 L1179.33747,485.677967 C1178.56243,485.265443 1177.60058,485.55897 1177.18722,486.332452 C1176.77386,487.105934 1177.06798,488.069812 1177.84303,488.478369 L1204.81851,502.813571 C1205.04903,502.940501 1205.30738,503 1205.56573,503 C1205.81613,503 1206.06653,502.940501 1206.29705,502.821504 L1222.60873,494.372699 L1222.60873,496.026761 C1222.60873,496.582082 1222.89888,497.097736 1223.37583,497.38333 C1223.6302,497.53406 1223.9124,497.613391 1224.19857,497.613391 C1224.45294,497.613391 1224.70731,497.549926 1224.93784,497.430929 L1239.64379,489.696107 C1240.16843,489.418447 1240.49435,488.878993 1240.49435,488.29194 L1240.49435,485.10678 L1258.14149,475.963825 C1258.92051,475.559234 1259.22258,474.599323 1258.82114,473.821874 C1258.41574,473.044426 1257.45786,472.742966 1256.67487,473.147557 L1240.49435,481.52893 L1240.49435,478.264438 L1258.14149,469.121483 Z"" id=""Fill-1"" fill=""#231F20"" style=""mix-blend-mode: multiply;""></path>
    </g>
    </svg>";

		private const string PersonnelParentSvg = @"<svg height=""40px"" viewbox=""0 0 98 75"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"">
<g id = ""Design-Elements"" stroke=""none"" stroke-width=""1"" fill=""none"" fill-rule=""evenodd"" transform=""translate(-1342.000000, -270.000000)"">
<path d = ""M1399.64473,324.820875 C1399.64473,325.869517 1398.79251,326.719729 1397.7414,326.719729 L1397.65242,326.719729 C1396.60131,326.719729 1395.74862,325.869517 1395.74862,324.820875 C1395.74862,323.772232 1396.60131,322.92202 1397.65242,322.92202 L1397.7414,322.92202 C1398.79251,322.92202 1399.64473,323.772232 1399.64473,324.820875 Z M1411.57002,324.820875 C1411.57002,325.869517 1410.7178,326.719729 1409.66669,326.719729 L1403.48136,326.719729 C1402.43024,326.719729 1401.57755,325.869517 1401.57755,324.820875 C1401.57755,323.772232 1402.43024,322.92202 1403.48136,322.92202 L1409.66669,322.92202 C1410.7178,322.92202 1411.57002,323.772232 1411.57002,324.820875 Z M1411.57002,299.815811 C1411.57002,300.864453 1410.7178,301.714665 1409.66669,301.714665 L1384.25443,301.714665 C1383.20332,301.714665 1382.3511,300.864453 1382.3511,299.815811 C1382.3511,298.767169 1383.20332,297.916957 1384.25443,297.916957 L1409.66669,297.916957 C1410.7178,297.916957 1411.57002,298.767169 1411.57002,299.815811 Z M1411.57002,293.632192 C1411.57002,294.680834 1410.7178,295.531046 1409.66669,295.531046 L1384.25443,295.531046 C1383.20332,295.531046 1382.3511,294.680834 1382.3511,293.632192 C1382.3511,292.58355 1383.20332,291.733338 1384.25443,291.733338 L1409.66669,291.733338 C1410.7178,291.733338 1411.57002,292.58355 1411.57002,293.632192 Z M1382.3511,287.448573 C1382.3511,286.39993 1383.20332,285.549718 1384.25443,285.549718 L1409.66669,285.549718 C1410.7178,285.549718 1411.57002,286.39993 1411.57002,287.448573 C1411.57002,288.497215 1410.7178,289.347427 1409.66669,289.347427 L1384.25443,289.347427 C1383.20332,289.347427 1382.3511,288.497215 1382.3511,287.448573 Z M1418.43056,280.761757 L1418.43056,334.04361 C1418.42104,334.105323 1418.42104,334.171783 1418.42104,334.238243 C1418.42104,338.078676 1415.29007,341.202291 1411.44059,341.202291 C1407.59111,341.202291 1404.46014,338.078676 1404.46014,334.238243 C1404.46014,333.189126 1403.6084,332.339389 1402.55682,332.339389 L1375.72467,332.339389 L1375.72467,318.026774 L1376.72868,319.037914 L1378.96985,321.311792 C1379.02219,321.359263 1379.06977,321.406735 1379.12687,321.449459 C1381.33473,323.248623 1383.73292,323.590417 1385.85037,323.894234 C1387.8679,324.183809 1389.15264,324.411672 1390.04245,325.418064 C1390.41835,325.84056 1390.94177,326.058928 1391.46518,326.058928 C1391.91722,326.058928 1392.3645,325.902272 1392.72614,325.579467 C1393.15438,325.204443 1393.36851,324.682258 1393.36851,324.160073 C1393.36851,323.709096 1393.21148,323.262865 1392.89268,322.902082 C1391.9648,321.857713 1391.74116,320.55225 1391.45567,318.904994 C1391.09403,316.830496 1390.64675,314.248054 1388.42462,312.021647 L1386.34523,309.918666 L1375.72467,299.161656 L1375.72467,280.761757 C1375.72467,276.921324 1378.85565,273.797709 1382.70512,273.797709 L1421.0048,273.797709 C1419.39649,275.672827 1418.43056,278.108108 1418.43056,280.761757 Z M1372.57943,341.202291 C1369.39136,341.202291 1366.69339,339.056586 1365.86069,336.137097 L1400.82479,336.137097 C1401.16739,338.045446 1402.01437,339.782898 1403.22298,341.202291 L1372.57943,341.202291 Z M1385.71714,314.694284 C1387.10181,316.080448 1387.38255,317.68498 1387.70611,319.550604 C1387.74894,319.816444 1387.79652,320.087031 1387.84886,320.362365 C1387.354,320.272169 1386.86865,320.205709 1386.39282,320.134502 C1384.637,319.882904 1382.98111,319.645547 1381.60595,318.567947 L1380.82559,317.779923 L1384.9225,313.892018 L1385.71714,314.694284 Z M1355.72547,292.363757 L1359.82238,288.471106 L1371.91802,300.718716 L1375.72467,304.573391 L1382.24832,311.181404 L1378.15141,315.069308 L1375.72467,312.615039 L1371.91802,308.760365 L1355.72547,292.363757 Z M1349.80137,286.363377 L1349.79185,286.353883 C1349.79138,286.353883 1349.79138,286.353883 1349.79138,286.353883 C1349.25607,285.819356 1348.96153,285.109184 1348.96153,284.35344 C1348.96153,282.792582 1350.23438,281.523198 1351.79891,281.523198 C1352.50742,281.523198 1353.17835,281.787613 1353.697,282.254731 C1353.697,282.255206 1353.69748,282.256155 1353.69843,282.257105 C1353.69843,282.257105 1353.70319,282.257105 1353.70319,282.261852 C1353.74126,282.309323 1353.78408,282.356795 1353.83166,282.404266 L1354.06958,282.64637 L1354.15999,282.741313 L1357.15297,285.765238 L1353.0513,289.65789 L1349.80137,286.363377 Z M1429.21766,270 L1382.70512,270 C1376.75723,270 1371.91802,274.827837 1371.91802,280.761757 L1371.91802,295.306981 L1356.85795,280.059181 L1356.78705,279.987024 C1355.52325,278.551016 1353.71984,277.725489 1351.79891,277.725489 C1348.13548,277.725489 1345.15488,280.69862 1345.15488,284.35344 C1345.15488,286.050066 1345.79582,287.645579 1346.95352,288.877935 C1346.95637,288.881258 1346.9578,288.885531 1346.96066,288.888854 C1346.96541,288.893601 1346.97017,288.898348 1346.97493,288.903095 C1347.00824,288.945819 1347.04631,288.988544 1347.08913,289.031268 L1350.29148,292.273562 L1348.42955,294.041395 L1345.25908,290.830907 C1344.52059,290.083708 1343.31579,290.075163 1342.5673,290.811444 C1341.81882,291.54725 1341.80978,292.749699 1342.54732,293.496899 L1357.01736,308.147984 C1357.38993,308.525381 1357.88147,308.714317 1358.37348,308.714317 C1358.85549,308.714317 1359.33846,308.532502 1359.70914,308.167922 C1360.45809,307.432116 1360.46666,306.229666 1359.72912,305.482467 L1351.10229,296.747737 L1352.96565,294.979429 L1371.91802,314.172099 L1371.91802,332.339389 L1363.69565,332.339389 C1362.64406,332.339389 1361.79233,333.189126 1361.79233,334.238243 C1361.79233,340.172163 1366.63153,345 1372.57943,345 L1411.54051,345 C1417.35042,344.947782 1422.07543,340.290841 1422.22293,334.513577 C1422.23245,334.44237 1422.23721,334.361668 1422.23721,334.285714 L1422.23721,280.761757 C1422.23721,276.921324 1425.36818,273.797709 1429.21766,273.797709 C1432.40573,273.797709 1435.09894,275.943414 1435.93164,278.862903 L1427.27151,278.862903 C1426.21992,278.862903 1425.36818,279.71264 1425.36818,280.761757 C1425.36818,281.810874 1426.21992,282.660611 1427.27151,282.660611 L1438.09667,282.660611 C1439.14826,282.660611 1440,281.810874 1440,280.761757 C1440,274.827837 1435.16079,270 1429.21766,270 Z"" id=""Fill-1"" fill=""#CF794A""></path>
</g>
</svg>";

		private const string PersonnelChildSvg = @"<svg width=""98px"" height=""75px"" viewbox=""0 0 98 75"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"">
    <g id = ""Design-Elements"" stroke=""none"" stroke-width=""1"" fill=""none"" fill-rule=""evenodd"" transform=""translate(-1342.000000, -428.000000)"" fill-opacity=""0.0700000003"">
    <path d = ""M1399.64473,482.820875 C1399.64473,483.869517 1398.79251,484.719729 1397.7414,484.719729 L1397.65242,484.719729 C1396.60131,484.719729 1395.74862,483.869517 1395.74862,482.820875 C1395.74862,481.772232 1396.60131,480.92202 1397.65242,480.92202 L1397.7414,480.92202 C1398.79251,480.92202 1399.64473,481.772232 1399.64473,482.820875 Z M1411.57002,482.820875 C1411.57002,483.869517 1410.7178,484.719729 1409.66669,484.719729 L1403.48136,484.719729 C1402.43024,484.719729 1401.57755,483.869517 1401.57755,482.820875 C1401.57755,481.772232 1402.43024,480.92202 1403.48136,480.92202 L1409.66669,480.92202 C1410.7178,480.92202 1411.57002,481.772232 1411.57002,482.820875 Z M1411.57002,457.815811 C1411.57002,458.864453 1410.7178,459.714665 1409.66669,459.714665 L1384.25443,459.714665 C1383.20332,459.714665 1382.3511,458.864453 1382.3511,457.815811 C1382.3511,456.767169 1383.20332,455.916957 1384.25443,455.916957 L1409.66669,455.916957 C1410.7178,455.916957 1411.57002,456.767169 1411.57002,457.815811 Z M1411.57002,451.632192 C1411.57002,452.680834 1410.7178,453.531046 1409.66669,453.531046 L1384.25443,453.531046 C1383.20332,453.531046 1382.3511,452.680834 1382.3511,451.632192 C1382.3511,450.58355 1383.20332,449.733338 1384.25443,449.733338 L1409.66669,449.733338 C1410.7178,449.733338 1411.57002,450.58355 1411.57002,451.632192 Z M1382.3511,445.448573 C1382.3511,444.39993 1383.20332,443.549718 1384.25443,443.549718 L1409.66669,443.549718 C1410.7178,443.549718 1411.57002,444.39993 1411.57002,445.448573 C1411.57002,446.497215 1410.7178,447.347427 1409.66669,447.347427 L1384.25443,447.347427 C1383.20332,447.347427 1382.3511,446.497215 1382.3511,445.448573 Z M1418.43056,438.761757 L1418.43056,492.04361 C1418.42104,492.105323 1418.42104,492.171783 1418.42104,492.238243 C1418.42104,496.078676 1415.29007,499.202291 1411.44059,499.202291 C1407.59111,499.202291 1404.46014,496.078676 1404.46014,492.238243 C1404.46014,491.189126 1403.6084,490.339389 1402.55682,490.339389 L1375.72467,490.339389 L1375.72467,476.026774 L1376.72868,477.037914 L1378.96985,479.311792 C1379.02219,479.359263 1379.06977,479.406735 1379.12687,479.449459 C1381.33473,481.248623 1383.73292,481.590417 1385.85037,481.894234 C1387.8679,482.183809 1389.15264,482.411672 1390.04245,483.418064 C1390.41835,483.84056 1390.94177,484.058928 1391.46518,484.058928 C1391.91722,484.058928 1392.3645,483.902272 1392.72614,483.579467 C1393.15438,483.204443 1393.36851,482.682258 1393.36851,482.160073 C1393.36851,481.709096 1393.21148,481.262865 1392.89268,480.902082 C1391.9648,479.857713 1391.74116,478.55225 1391.45567,476.904994 C1391.09403,474.830496 1390.64675,472.248054 1388.42462,470.021647 L1386.34523,467.918666 L1375.72467,457.161656 L1375.72467,438.761757 C1375.72467,434.921324 1378.85565,431.797709 1382.70512,431.797709 L1421.0048,431.797709 C1419.39649,433.672827 1418.43056,436.108108 1418.43056,438.761757 Z M1372.57943,499.202291 C1369.39136,499.202291 1366.69339,497.056586 1365.86069,494.137097 L1400.82479,494.137097 C1401.16739,496.045446 1402.01437,497.782898 1403.22298,499.202291 L1372.57943,499.202291 Z M1385.71714,472.694284 C1387.10181,474.080448 1387.38255,475.68498 1387.70611,477.550604 C1387.74894,477.816444 1387.79652,478.087031 1387.84886,478.362365 C1387.354,478.272169 1386.86865,478.205709 1386.39282,478.134502 C1384.637,477.882904 1382.98111,477.645547 1381.60595,476.567947 L1380.82559,475.779923 L1384.9225,471.892018 L1385.71714,472.694284 Z M1355.72547,450.363757 L1359.82238,446.471106 L1371.91802,458.718716 L1375.72467,462.573391 L1382.24832,469.181404 L1378.15141,473.069308 L1375.72467,470.615039 L1371.91802,466.760365 L1355.72547,450.363757 Z M1349.80137,444.363377 L1349.79185,444.353883 C1349.79138,444.353883 1349.79138,444.353883 1349.79138,444.353883 C1349.25607,443.819356 1348.96153,443.109184 1348.96153,442.35344 C1348.96153,440.792582 1350.23438,439.523198 1351.79891,439.523198 C1352.50742,439.523198 1353.17835,439.787613 1353.697,440.254731 C1353.697,440.255206 1353.69748,440.256155 1353.69843,440.257105 C1353.69843,440.257105 1353.70319,440.257105 1353.70319,440.261852 C1353.74126,440.309323 1353.78408,440.356795 1353.83166,440.404266 L1354.06958,440.64637 L1354.15999,440.741313 L1357.15297,443.765238 L1353.0513,447.65789 L1349.80137,444.363377 Z M1429.21766,428 L1382.70512,428 C1376.75723,428 1371.91802,432.827837 1371.91802,438.761757 L1371.91802,453.306981 L1356.85795,438.059181 L1356.78705,437.987024 C1355.52325,436.551016 1353.71984,435.725489 1351.79891,435.725489 C1348.13548,435.725489 1345.15488,438.69862 1345.15488,442.35344 C1345.15488,444.050066 1345.79582,445.645579 1346.95352,446.877935 C1346.95637,446.881258 1346.9578,446.885531 1346.96066,446.888854 C1346.96541,446.893601 1346.97017,446.898348 1346.97493,446.903095 C1347.00824,446.945819 1347.04631,446.988544 1347.08913,447.031268 L1350.29148,450.273562 L1348.42955,452.041395 L1345.25908,448.830907 C1344.52059,448.083708 1343.31579,448.075163 1342.5673,448.811444 C1341.81882,449.54725 1341.80978,450.749699 1342.54732,451.496899 L1357.01736,466.147984 C1357.38993,466.525381 1357.88147,466.714317 1358.37348,466.714317 C1358.85549,466.714317 1359.33846,466.532502 1359.70914,466.167922 C1360.45809,465.432116 1360.46666,464.229666 1359.72912,463.482467 L1351.10229,454.747737 L1352.96565,452.979429 L1371.91802,472.172099 L1371.91802,490.339389 L1363.69565,490.339389 C1362.64406,490.339389 1361.79233,491.189126 1361.79233,492.238243 C1361.79233,498.172163 1366.63153,503 1372.57943,503 L1411.54051,503 C1417.35042,502.947782 1422.07543,498.290841 1422.22293,492.513577 C1422.23245,492.44237 1422.23721,492.361668 1422.23721,492.285714 L1422.23721,438.761757 C1422.23721,434.921324 1425.36818,431.797709 1429.21766,431.797709 C1432.40573,431.797709 1435.09894,433.943414 1435.93164,436.862903 L1427.27151,436.862903 C1426.21992,436.862903 1425.36818,437.71264 1425.36818,438.761757 C1425.36818,439.810874 1426.21992,440.660611 1427.27151,440.660611 L1438.09667,440.660611 C1439.14826,440.660611 1440,439.810874 1440,438.761757 C1440,432.827837 1435.16079,428 1429.21766,428 Z"" id=""Fill-1"" fill=""#231F20"" style=""mix-blend-mode: multiply;""></path>
    </g>
    </svg>";
		#endregion Svg

		#endregion Constants

		#region Variables

		#region Guids
		public Guid Featured_VWS_A_RIT = Guid.Empty;

		public Guid LeadershipMotivatingPeople = Guid.Empty;
		public Guid LeadershipLeadershipStyles = Guid.Empty;
		public Guid LeadershipEthics = Guid.Empty;
		public Guid LeadershipGenerationalDifferences = Guid.Empty;
		public Guid LeadershipStrategy = Guid.Empty;

		public Guid PersonnelVolunteerCareerRelations = Guid.Empty;
		public Guid PersonnelRecruitment = Guid.Empty;
		public Guid PersonnelRetention = Guid.Empty;
		public Guid PersonnelLegalIssues = Guid.Empty;
		public Guid PersonnelInsurance = Guid.Empty;

		public Guid FinanceBudgeting = Guid.Empty;
		public Guid FinanceFundraising = Guid.Empty;
		public Guid FinanceLegalIssues = Guid.Empty;

		public Guid CommunityRelationsCustomerService = Guid.Empty;
		public Guid CommunityRelationsMarketingMedia = Guid.Empty;
		public Guid CommunityRelationsPolitics = Guid.Empty;
		public Guid CommunityRelationsCrisisCommunication = Guid.Empty;

		//Parent Categories GUID
		public Guid LeadershipCategory = Guid.Empty;
		public Guid PersonnelCategory = Guid.Empty;
		public Guid FinanceCategory = Guid.Empty;
		public Guid CommunityCategory = Guid.Empty;
		public Guid DepartmentAdministrationCategory = Guid.Empty;
		#endregion Guids

		private List<Guid> topicParentCategories = new List<Guid>();
		private List<Guid> topicCategories = new List<Guid>();
		private List<Guid> topicFinanceCategories = new List<Guid>();
		private List<Guid> topicLeadershipCategories = new List<Guid>();
		private List<Guid> topicPersonnelCategories = new List<Guid>();
		private List<Guid> topicCommunityRelationsCategories = new List<Guid>();
		Dictionary<Guid, Categories> categoriesDictionaly = new Dictionary<Guid, Categories>();
		Dictionary<string, Image> resourceTypeImages = new Dictionary<string, Image>();
		private bool isUserAuthorized = false;
		private string hostUrl = String.Empty;
		#endregion Variables

		#region Constructor
		public IAFCHandBookHelper(string hostPath)
		{
			hostUrl = "https://" + hostPath;
			isUserAuthorized = IsUserAuthorized();
			InitResourceTypeImages();
			InitCategoriesGuid();
			InitCategoriesLists();
			InitCategoryDictionary();

		}
		#endregion Constructor

		#region IsUserAuthorized
		private Boolean IsUserAuthorized()
		{
			Boolean returnValue = false;
			var identity = ClaimsManager.GetCurrentIdentity();
			var currentUserGuid = identity.UserId;

			if (currentUserGuid != Guid.Empty)
			{
				returnValue = true;
			}
			return returnValue;
		}
		#endregion IsUserAuthorized

		#region InitCategories

		#region InitCategoriesGuid
		public void InitCategoriesGuid()
		{
			TaxonomyManager taxonomyManager = TaxonomyManager.GetManager();
			var TopicCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == "2-topics").ToArray().Where(c => c.Parent == null).First();
			var TopicCategotyId = TopicCategory.Id;

			var FeaturedCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == "1-featured").ToArray().Where(c => c.Parent == null).First();
			var FeaturedCategotyId = FeaturedCategory.Id;

			//Other
			var currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == DepartmentAdministrationName).ToArray().Where(c => c.ParentId == TopicCategotyId).First();
			DepartmentAdministrationCategory = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == Featured_VWS_A_RITName).ToArray().Where(c => c.ParentId == FeaturedCategotyId).First();
			Featured_VWS_A_RIT = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == LeadershipName).ToArray().Where(c => c.ParentId == TopicCategotyId).First();
			LeadershipCategory = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == PersonnelName).ToArray().Where(c => c.ParentId == TopicCategotyId).First();
			PersonnelCategory = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == FinanceName).ToArray().Where(c => c.ParentId == DepartmentAdministrationCategory).First();
			FinanceCategory = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == CommunityName).ToArray().Where(c => c.ParentId == DepartmentAdministrationCategory).First();
			CommunityCategory = currentResourceCategory.Id;

			

			//Leadership
			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == LeadershipMotivatingPeopleName).ToArray().Where(c => c.ParentId == LeadershipCategory).First();
			LeadershipMotivatingPeople = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == LeadershipLeadershipStylesName).ToArray().Where(c => c.ParentId == LeadershipCategory).First();
			LeadershipLeadershipStyles = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == LeadershipEthicsName).ToArray().Where(c => c.ParentId == LeadershipCategory).First();
			LeadershipEthics = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == LeadershipGenerationalDifferencesName).ToArray().Where(c => c.ParentId == LeadershipCategory).First();
			LeadershipGenerationalDifferences = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == LeadershipStrategyName).ToArray().Where(c => c.ParentId == DepartmentAdministrationCategory).First();
			LeadershipStrategy = currentResourceCategory.Id;

			//Personnel
			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == PersonnelVolunteerCareerRelationsName).ToArray().Where(c => c.ParentId == PersonnelCategory).First();
			PersonnelVolunteerCareerRelations = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == PersonnelRecruitmentName).ToArray().Where(c => c.ParentId == PersonnelCategory).First();
			PersonnelRecruitment = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == PersonnelRetentionName).ToArray().Where(c => c.ParentId == PersonnelCategory).First();
			PersonnelRetention = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == PersonnelLegalIssuesName).ToArray().Where(c => c.ParentId == PersonnelCategory).First();
			PersonnelLegalIssues = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == PersonnelInsuranceName).ToArray().Where(c => c.ParentId == PersonnelCategory).First();
			PersonnelInsurance = currentResourceCategory.Id;

			//Finance
			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == FinanceBudgetingName).ToArray().Where(c => c.ParentId == FinanceCategory).First();
			FinanceBudgeting = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == FinanceFundraisingName).ToArray().Where(c => c.ParentId == FinanceCategory).First();
			FinanceFundraising = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == FinanceLegalIssuesName).ToArray().Where(c => c.ParentId == FinanceCategory).First();
			FinanceLegalIssues = currentResourceCategory.Id;

			//Community Relations
			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == CommunityRelationsCustomerServiceName).ToArray().Where(c => c.ParentId == CommunityCategory).First();
			CommunityRelationsCustomerService = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == CommunityRelationsMarketingMediaName).ToArray().Where(c => c.ParentId == CommunityCategory).First();
			CommunityRelationsMarketingMedia = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == CommunityRelationsPoliticsName).ToArray().Where(c=>c.ParentId == CommunityCategory).First();
			CommunityRelationsPolitics = currentResourceCategory.Id;

			currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == CommunityRelationsCrisisCommunicationName).ToArray().Where(c => c.ParentId == DepartmentAdministrationCategory).First();
			CommunityRelationsCrisisCommunication = currentResourceCategory.Id;

		

			
		}
		#endregion InitCategoriesGuid

		#region GetCategoryGuidByName
		public Guid GetCategoryGuidByName(string categoryName)
		{
			Guid categoryID = Guid.Empty;

			switch (categoryName)
			{
				case LeadershipMotivatingPeopleName:
					categoryID = LeadershipMotivatingPeople;
					break;
				case LeadershipLeadershipStylesName:
					categoryID = LeadershipLeadershipStyles;
					break;
				case LeadershipEthicsName:
					categoryID = LeadershipEthics;
					break;
				case LeadershipGenerationalDifferencesName:
					categoryID = LeadershipGenerationalDifferences;
					break;
				case LeadershipStrategyName:
					categoryID = LeadershipStrategy;
					break;
				case PersonnelVolunteerCareerRelationsName:
					categoryID = PersonnelVolunteerCareerRelations;
					break;
				case PersonnelRecruitmentName:
					categoryID = PersonnelRecruitment;
					break;
				case PersonnelRetentionName:
					categoryID = PersonnelRetention;
					break;
				case PersonnelLegalIssuesName:
					categoryID = PersonnelLegalIssues;
					break;
				case PersonnelInsuranceName:
					categoryID = PersonnelInsurance;
					break;
				case FinanceBudgetingName:
					categoryID = FinanceBudgeting;
					break;
				case FinanceFundraisingName:
					categoryID = FinanceFundraising;
					break;
				case FinanceLegalIssuesName:
					categoryID = FinanceLegalIssues;
					break;
				case CommunityRelationsCustomerServiceName:
					categoryID = CommunityRelationsCustomerService;
					break;
				case CommunityRelationsMarketingMediaName:
					categoryID = CommunityRelationsMarketingMedia;
					break;
				case CommunityRelationsPoliticsName:
					categoryID = CommunityRelationsPolitics;
					break;
				case CommunityRelationsCrisisCommunicationName:
					categoryID = CommunityRelationsCrisisCommunication;
					break;
				case Featured_VWS_A_RITName:
					categoryID = Featured_VWS_A_RIT;
					break;
				case LeadershipName:
					categoryID = LeadershipCategory;
					break;
				case PersonnelName:
					categoryID = PersonnelCategory;
					break;
				case FinanceName:
					categoryID = FinanceCategory;
					break;
				case CommunityName:
					categoryID = CommunityCategory;
					break;
				case DepartmentAdministrationName:
					categoryID = DepartmentAdministrationCategory;
					break;
				default:
					categoryID = Guid.Empty;
					break;
			}
			return categoryID;
		}
		#endregion GetCategoryGuidByName

		#region InitCategoriesLists
		public void InitCategoriesLists()
		{
			InitTopicParentCategories();
			InitTopicCategories();
			InitTopicLeadershipCategories();
			InitTopicPersonnelCategoriesLists();
			InitTopicFinanceCategories();
			InitTopicCommunityRelationsCategories();
		}
		#endregion InitCategoriesLists

		#region InitTopicParentCategories
		public void InitTopicParentCategories()
		{
			//CommunityRelations
			topicParentCategories.Add(CommunityCategory);
			//Leadership
			topicParentCategories.Add(LeadershipCategory);
			//Finance
			topicParentCategories.Add(FinanceCategory);
			//Personnel
			topicParentCategories.Add(PersonnelCategory);

		}
		#endregion InitTopicParentCategories

		#region InitTopicCategories
		public void InitTopicCategories()
		{
			//Leadership
			topicCategories.Add(LeadershipMotivatingPeople);
			topicCategories.Add(LeadershipLeadershipStyles);
			topicCategories.Add(LeadershipEthics);
			topicCategories.Add(LeadershipGenerationalDifferences);
			topicCategories.Add(LeadershipStrategy);
			//Personnel
			topicCategories.Add(PersonnelVolunteerCareerRelations);
			topicCategories.Add(PersonnelRecruitment);
			topicCategories.Add(PersonnelRetention);
			topicCategories.Add(PersonnelLegalIssues);
			topicCategories.Add(PersonnelInsurance);
			//Finance
			topicCategories.Add(FinanceBudgeting);
			topicCategories.Add(FinanceFundraising);
			topicCategories.Add(FinanceLegalIssues);
			//CommunityRelations
			topicCategories.Add(CommunityRelationsCustomerService);
			topicCategories.Add(CommunityRelationsMarketingMedia);
			topicCategories.Add(CommunityRelationsPolitics);
			topicCategories.Add(CommunityRelationsCrisisCommunication);
		}
		#endregion InitTopicCategories

		#region InitTopicLeadershipCategories
		public void InitTopicLeadershipCategories()
		{
			//Leadership
			topicLeadershipCategories.Add(LeadershipEthics);
			topicLeadershipCategories.Add(LeadershipGenerationalDifferences);
			topicLeadershipCategories.Add(LeadershipLeadershipStyles);
			topicLeadershipCategories.Add(LeadershipMotivatingPeople);
			topicLeadershipCategories.Add(LeadershipStrategy);
		}
		#endregion InitTopicLeadershipCategories

		#region InitTopicPersonnelCategoriesLists
		public void InitTopicPersonnelCategoriesLists()
		{
			//Personnel
			topicPersonnelCategories.Add(PersonnelInsurance);
			topicPersonnelCategories.Add(PersonnelLegalIssues);
			topicPersonnelCategories.Add(PersonnelRecruitment);
			topicPersonnelCategories.Add(PersonnelRetention);
			topicPersonnelCategories.Add(PersonnelVolunteerCareerRelations);



		}
		#endregion InitTopicPersonnelCategoriesLists

		#region InitTopicFinanceCategories
		public void InitTopicFinanceCategories()
		{
			//Finance
			topicFinanceCategories.Add(FinanceBudgeting);
			topicFinanceCategories.Add(FinanceFundraising);
			topicFinanceCategories.Add(FinanceLegalIssues);
		}
		#endregion InitTopicFinanceCategories

		#region InitTopicCommunityRelationsCategories
		public void InitTopicCommunityRelationsCategories()
		{
			//CommunityRelations
			topicCommunityRelationsCategories.Add(CommunityRelationsCrisisCommunication);
			topicCommunityRelationsCategories.Add(CommunityRelationsCustomerService);
			topicCommunityRelationsCategories.Add(CommunityRelationsMarketingMedia);
			topicCommunityRelationsCategories.Add(CommunityRelationsPolitics);
		}
		#endregion InitTopicCommunityRelationsCategories

		#region InitCategoryDictionary
		private void InitCategoryDictionary()
		{
			TaxonomyManager taxonomyManager = TaxonomyManager.GetManager();
			var resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == LeadershipCategory).First();
			var resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			var resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			var resourceParenCategoryDescription = resourceCategoryItem.Description.ToString();
			var image = GetCategoryImage(LeadershipCategory);

			var category = new Categories("Leadership",
				resourceCategoryDescription,
				String.Empty,
				String.Empty,
				String.Empty,
				TopicLeadershipImageUrl,
				TopicLeadershipUrl,
				String.Empty,
				TopicLeadershipUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				LeadershipParentClass
				);
			categoriesDictionaly.Add(LeadershipCategory, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == LeadershipMotivatingPeople).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(LeadershipMotivatingPeople);
			category = new Categories("Motivating / Discipline",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicLeadershipUrl,
				LeadershipCategoryTitle,
				TopicLeadershipImageUrl,
				TopicLeadershipMotivatingPeopleUrl,
				TopicLeadershipUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicLeadershipMotivatingPeopleUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				LeadershipChildClass);
			categoriesDictionaly.Add(LeadershipMotivatingPeople, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == LeadershipLeadershipStyles).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(LeadershipLeadershipStyles);
			category = new Categories("Leadership Styles",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicLeadershipUrl,
				LeadershipCategoryTitle,
				TopicLeadershipImageUrl,
				TopicLeadershipLeadershipStylesUrl,
				TopicLeadershipUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicLeadershipLeadershipStylesUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				LeadershipChildClass);
			categoriesDictionaly.Add(LeadershipLeadershipStyles, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == LeadershipEthics).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(LeadershipEthics);
			category = new Categories("Ethics",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicLeadershipUrl,
				LeadershipCategoryTitle,
				TopicLeadershipImageUrl,
				TopicLeadershipEthicsUrl,
				TopicLeadershipUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicLeadershipEthicsUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				LeadershipChildClass);
			categoriesDictionaly.Add(LeadershipEthics, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == LeadershipGenerationalDifferences).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(LeadershipGenerationalDifferences);
			category = new Categories("Generational Differences",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicLeadershipUrl,
				LeadershipCategoryTitle,
				TopicLeadershipImageUrl,
				TopicLeadershipGenerationalDifferencesUrl,
				TopicLeadershipUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicLeadershipGenerationalDifferencesUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				LeadershipChildClass);
			categoriesDictionaly.Add(LeadershipGenerationalDifferences, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == LeadershipStrategy).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(LeadershipStrategy);
			category = new Categories("Strategy",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicLeadershipUrl,
				LeadershipCategoryTitle,
				TopicLeadershipImageUrl,
				TopicLeadershipStrategyUrl,
				TopicLeadershipUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicLeadershipStrategyUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				LeadershipChildClass);
			categoriesDictionaly.Add(LeadershipStrategy, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == PersonnelCategory).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			resourceParenCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(PersonnelCategory);
			category = new Categories("Personnel",
				resourceCategoryDescription,
				String.Empty,
				String.Empty,
				String.Empty,
				TopicPersonnelImageUrl,
				TopicPersonnelUrl,
				String.Empty,
				TopicPersonnelUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				PersonnelParentClass);
			categoriesDictionaly.Add(PersonnelCategory, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == PersonnelVolunteerCareerRelations).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(PersonnelVolunteerCareerRelations);
			category = new Categories("Volunteer / Career Relations",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicPersonnelUrl,
				PersonnelCategoryTitle,
				TopicPersonnelImageUrl,
				TopicPersonnelVolunteerCareerRelationsUrl,
				TopicPersonnelUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicPersonnelVolunteerCareerRelationsUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				PersonnelChildClass);
			categoriesDictionaly.Add(PersonnelVolunteerCareerRelations, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == PersonnelRecruitment).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(PersonnelRecruitment);
			category = new Categories("Recruitment",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicPersonnelUrl,
				PersonnelCategoryTitle,
				TopicPersonnelImageUrl,
				TopicPersonnelRecruitmentUrl,
				TopicPersonnelUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicPersonnelRecruitmentUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				PersonnelChildClass);
			categoriesDictionaly.Add(PersonnelRecruitment, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == PersonnelRetention).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(PersonnelRetention);
			category = new Categories("Retention",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicPersonnelUrl,
				PersonnelCategoryTitle,
				TopicPersonnelImageUrl,
				TopicPersonnelRetentionUrl,
				TopicPersonnelUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicPersonnelRetentionUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				PersonnelChildClass);
			categoriesDictionaly.Add(PersonnelRetention, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == PersonnelLegalIssues).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(PersonnelLegalIssues);
			category = new Categories("Legal Issues",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicPersonnelUrl,
				PersonnelCategoryTitle,
				TopicPersonnelImageUrl,
				TopicPersonnelLegalIssuesUrl,
				TopicPersonnelUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicPersonnelLegalIssuesUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				PersonnelChildClass);
			categoriesDictionaly.Add(PersonnelLegalIssues, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == PersonnelInsurance).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(PersonnelInsurance);
			category = new Categories("Insurance",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicPersonnelUrl,
				PersonnelCategoryTitle,
				TopicPersonnelImageUrl,
				TopicPersonnelInsuranceUrl,
				TopicPersonnelUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicPersonnelInsuranceUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				PersonnelChildClass);
			categoriesDictionaly.Add(PersonnelInsurance, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == FinanceCategory).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			resourceParenCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(FinanceCategory);
			category = new Categories("Finance",
				resourceCategoryDescription,
				String.Empty,
				String.Empty,
				String.Empty,
				TopicFinanceImageUrl,
				TopicFinanceUrl,
				String.Empty,
				TopicFinanceUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				FinanceParentClass);
			categoriesDictionaly.Add(FinanceCategory, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == FinanceBudgeting).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(FinanceBudgeting);
			category = new Categories("Budgeting",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicFinanceUrl,
				FinanceCategoryTitle,
				TopicFinanceImageUrl,
				TopicFinanceBudgetingUrl,
				TopicFinanceUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicFinanceBudgetingUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				FinanceChildClass);
			categoriesDictionaly.Add(FinanceBudgeting, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == FinanceFundraising).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(FinanceFundraising);
			category = new Categories("Fundraising",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicFinanceUrl,
				FinanceCategoryTitle,
				TopicFinanceImageUrl,
				TopicFinanceFundraisingUrl,
				TopicFinanceUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicFinanceFundraisingUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				FinanceChildClass);
			categoriesDictionaly.Add(FinanceFundraising, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == FinanceLegalIssues).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(FinanceLegalIssues);
			category = new Categories("Legal Issues",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicFinanceUrl,
				FinanceCategoryTitle,
				TopicFinanceImageUrl,
				TopicFinanceLegalIssuesUrl,
				TopicFinanceUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicFinanceLegalIssuesUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				FinanceChildClass);
			categoriesDictionaly.Add(FinanceLegalIssues, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == CommunityCategory).First();
			resourceCategoryTitle = CommunityCategoryTitle;
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			resourceParenCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(CommunityCategory);
			category = new Categories("Community",
				resourceCategoryDescription,
				String.Empty,
				String.Empty,
				String.Empty,
				TopicCommunityImageUrl,
				TopicCommunityUrl,
				String.Empty,
				TopicCommunityUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				CommunityParentClass);
			categoriesDictionaly.Add(CommunityCategory, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == CommunityRelationsCustomerService).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(CommunityRelationsCustomerService);
			category = new Categories("Customer Service",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicCommunityUrl,
				CommunityCategoryTitle,
				TopicCommunityImageUrl,
				TopicCommunityCustomerServiceUrl,
				TopicCommunityUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicCommunityCustomerServiceUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				CommunityChildClass);
			categoriesDictionaly.Add(CommunityRelationsCustomerService, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == CommunityRelationsMarketingMedia).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(CommunityRelationsMarketingMedia);
			category = new Categories("Marketing & Media",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicCommunityUrl,
				CommunityCategoryTitle,
				TopicCommunityImageUrl,
				TopicCommunityMarketingAndMediaUrl,
				TopicCommunityUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicCommunityMarketingAndMediaUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				CommunityChildClass);
			categoriesDictionaly.Add(CommunityRelationsMarketingMedia, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == CommunityRelationsPolitics).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(CommunityRelationsPolitics);
			category = new Categories("Politics",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicCommunityUrl,
				CommunityCategoryTitle,
				TopicCommunityImageUrl,
				TopicCommunityPoliticsUrl,
				TopicCommunityUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicCommunityPoliticsUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				CommunityChildClass);
			categoriesDictionaly.Add(CommunityRelationsPolitics, category);

			resourceCategoryItem = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == CommunityRelationsCrisisCommunication).First();
			resourceCategoryTitle = resourceCategoryItem.Title.ToString();
			resourceCategoryDescription = resourceCategoryItem.Description.ToString();
			image = GetCategoryImage(CommunityRelationsCrisisCommunication);
			category = new Categories("Crisis Communication",
				resourceCategoryDescription,
				resourceParenCategoryDescription,
				TopicCommunityUrl,
				CommunityCategoryTitle,
				TopicCommunityImageUrl,
				TopicCommunityCrisisCommunicationUrl,
				TopicCommunityUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				TopicCommunityCrisisCommunicationUrl.Replace(topicMenuUrl, MyHandBookMenuUrl),
				image,
				CommunityChildClass);
			categoriesDictionaly.Add(CommunityRelationsCrisisCommunication, category);
		}
		#endregion InitCategoryDictionary

		#region GetCategories
		private Categories GetTopicCategories(Guid categoryID)
		{
			return categoriesDictionaly[categoryID];
		}
		#endregion GetCategories

		#region GetChildCategories
		public List<Guid> GetChildCategories(Guid categoryID)
		{
			var childCategories = new List<Guid>();

			if (categoryID == CommunityCategory)
			{
				childCategories = topicCommunityRelationsCategories;
			}
			else if (categoryID == LeadershipCategory)
			{
				childCategories = topicLeadershipCategories;
			}
			else if (categoryID == FinanceCategory)
			{
				childCategories = topicFinanceCategories;
			}
			else if (categoryID == PersonnelCategory)
			{
				childCategories = topicPersonnelCategories;
			}
			return childCategories;
		}
		#endregion GetChildCategories

		#endregion InitCategories	

		#region GetResourceLikesInfo
		public IAFCHandBookLikesModel GetResourceLikesInfo(DynamicContent resource, string resourceType = resourceResource)
		{
			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
			var resourceLike = new IAFCHandBookLikesModel();

			try
			{
				string commentFieldText = "Likes";
				if (resourceType == commentResource)
				{
					commentFieldText = "CommentLikes";
				}
				var likeModuleData = resource.GetRelatedItems(commentFieldText).Cast<DynamicContent>();
				var like = new DynamicContent();
				if (likeModuleData.Any())
				{
					like = resource.GetRelatedItems(commentFieldText).Cast<DynamicContent>().First();
				}
				else
				{
					//Create like for Resource					
					like = dynamicModuleManager.CreateDataItem(resourceLikesType);
					var liketitle = resource.GetValue("Title").ToString() + "_like";
					like.SetValue("Title", liketitle);
					like.SetValue("AmountOfLikes", 0);
					like.SetValue("AmountOfDislikes", 0);
					like.SetString("UrlName", new Lstring(Regex.Replace(liketitle, UrlNameCharsToReplace, UrlNameReplaceString)));
					like.SetValue("Owner", SecurityManager.GetCurrentUserId());
					like.SetValue("PublicationDate", DateTime.UtcNow);

					dynamicModuleManager.Lifecycle.Publish(like);
					like.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Published");

					//Add Like to resource						
					var resourceTypeItem = handBookResourcesType;
					if (resourceType == commentResource)
					{
						resourceTypeItem = resourceCommentsType;
					}

					var liveResource = dynamicModuleManager.GetDataItem(resourceTypeItem, resource.Id);
					var masterResource = dynamicModuleManager.Lifecycle.GetMaster(liveResource);

					DynamicContent checkOutResourceItem = dynamicModuleManager.Lifecycle.CheckOut(masterResource) as DynamicContent;
					checkOutResourceItem.CreateRelation(like, commentFieldText);
					ILifecycleDataItem checkInMyresourcesItem = dynamicModuleManager.Lifecycle.CheckIn(checkOutResourceItem);
					dynamicModuleManager.Lifecycle.Publish(checkInMyresourcesItem);

				}

				resourceLike.Id = like.Id;
				resourceLike.LikeTitle = like.GetValue("Title").ToString();
				resourceLike.Likes = Convert.ToInt32(like.GetValue("AmountOfLikes"));
				resourceLike.Dislikes = Convert.ToInt32(like.GetValue("AmountOfDislikes"));
				resourceLike.IsResourceLiked = IsResourceLiked(like.Id);
				resourceLike.IsResourceDisliked = IsResourceDisliked(like.Id);

				dynamicModuleManager.SaveChanges();
			}
			catch (Exception e)
			{
				log.Error("Can not get Likes for Resource ID = '" + resource.Id.ToString() + "' " + e.Message);
			}

			return resourceLike;
		}
		#endregion GetResourceLikesInfo

		#region Init Order By
		public List<IAFCHandBookTopicOrderBy> InitOrderBy(String orderBy, String url = "", bool addByTopic = false)
		{
			var orderByList = new List<IAFCHandBookTopicOrderBy>();

			var orderByItem = new IAFCHandBookTopicOrderBy();
			if (addByTopic)
			{
				orderByItem.Url = url + "/" + OrderByTopic;
				orderByItem.Title = OrderByTopic;
				if (orderBy == OrderByTopic)
				{
					orderByItem.Selected = true;
				}
				orderByList.Add(orderByItem);
			}

			orderByItem = new IAFCHandBookTopicOrderBy();
			orderByItem.Url = url + "/" + OrderByMostPopular;
			orderByItem.Title = OrderByMostPopular;
			if (orderBy == OrderByMostPopular)
			{
				orderByItem.Selected = true;
			}
			orderByList.Add(orderByItem);

			orderByItem = new IAFCHandBookTopicOrderBy();
			orderByItem.Url = url + "/" + OrderByMostRecent;
			orderByItem.Title = OrderByMostRecent;
			if (orderBy == OrderByMostRecent)
			{
				orderByItem.Selected = true;
			}
			orderByList.Add(orderByItem);

			orderByItem = new IAFCHandBookTopicOrderBy();
			orderByItem.Url = url + "/" + OrderByAlphabeticalAZ;
			orderByItem.Title = OrderByAlphabeticalAZ;
			if (orderBy == OrderByAlphabeticalAZ)
			{
				orderByItem.Selected = true;
			}
			orderByList.Add(orderByItem);

			orderByItem = new IAFCHandBookTopicOrderBy();
			orderByItem.Url = url + "/" + OrderByAlphabeticalZA;
			orderByItem.Title = OrderByAlphabeticalZA;
			if (orderBy == OrderByAlphabeticalZA)
			{
				orderByItem.Selected = true;
			}
			orderByList.Add(orderByItem);
			return orderByList;
		}
		#endregion Init Order By

		#region GetResourceComments
		public List<IAFCHandBookCommentModel> GetResourceComments(Guid resourceId, string resourceType = resourceResource)
		{
			var comments = new List<IAFCHandBookCommentModel>();

			var resourceTypeItem = handBookResourcesType;
			if (resourceType == commentResource)
			{
				resourceTypeItem = resourceCommentsType;
			}

			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
			var resourceItem = dynamicModuleManager.GetDataItems(resourceTypeItem).
						Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && d.Id == resourceId).
						First();
			comments = GetResourceComments(resourceItem, resourceType);


			return comments;
		}

		public List<IAFCHandBookCommentModel> GetResourceComments(DynamicContent resource, string resourceType = resourceResource)
		{
			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
			UserProfileManager profileManager = UserProfileManager.GetManager();
			UserManager userManager = UserManager.GetManager();

			string commentFieldName = "Comment";
			if (resourceType == commentResource)
			{
				commentFieldName = "Reply";
			}
			var resourceComments = resource.GetRelatedItems(commentFieldName).Cast<DynamicContent>().ToArray();
			var resourceCommentList = new List<IAFCHandBookCommentModel>();
			foreach (var commentItem in resourceComments.OrderByDescending(c => c.DateCreated))
			{
				var commentDetails = new IAFCHandBookCommentModel();
				commentDetails.Id = commentItem.Id;
				commentDetails.CommentText = commentItem.GetValue("CommentText").ToString();
				commentDetails.DateCreated = commentItem.DateCreated;
				commentDetails.Author.Id = commentItem.Owner;
				User user = userManager.GetUser(commentItem.Owner);
				SitefinityProfile profile = null;


				if (user != null)
				{
					profile = profileManager.GetUserProfile<SitefinityProfile>(user);
					if (profile != null)
					{
						commentDetails.Author.UserName = profile.FirstName + " " + profile.LastName;
					}
					else
					{

						commentDetails.Author.UserName = user.FirstName + " " + user.LastName;
					}
				}
				commentDetails.Likes = GetResourceLikesInfo(commentItem, commentResource);


				var replyComments = commentItem.GetRelatedItems("Reply").Cast<DynamicContent>();
				var replyCommentList = new List<IAFCHandBookCommentModel>();

				replyCommentList = GetReplyComments(replyComments);

				commentDetails.RepliedComments = replyCommentList;

				resourceCommentList.Add(commentDetails);
			}

			return resourceCommentList;
		}

		public List<IAFCHandBookCommentModel> GetReplyComments(IQueryable<DynamicContent> replyCommentArry)
		{
			UserProfileManager profileManager = UserProfileManager.GetManager();
			UserManager userManager = UserManager.GetManager();
			var replyCommentList = new List<IAFCHandBookCommentModel>();
			foreach (var replyCommentItem in replyCommentArry.OrderByDescending(c => c.DateCreated))
			{
				var replyCommentDetails = new IAFCHandBookCommentModel();
				replyCommentDetails.Id = replyCommentItem.Id;
				replyCommentDetails.CommentText = replyCommentItem.GetValue("CommentText").ToString();
				replyCommentDetails.DateCreated = replyCommentItem.DateCreated;
				replyCommentDetails.Author.Id = replyCommentItem.Owner;
				var user = userManager.GetUser(replyCommentItem.Owner);
				SitefinityProfile profile = null;

				if (user != null)
				{
					profile = profileManager.GetUserProfile<SitefinityProfile>(user);
					if (profile != null)
					{
						replyCommentDetails.Author.UserName = profile.FirstName + " " + profile.LastName;
					}
					else
					{
						replyCommentDetails.Author.UserName = user.FirstName + " " + user.LastName;
					}
				}
				replyCommentDetails.Likes = GetResourceLikesInfo(replyCommentItem, commentResource);

				var replyReplyComments = replyCommentItem.GetRelatedItems("Reply").Cast<DynamicContent>();
				var replyRepyCommentList = new List<IAFCHandBookCommentModel>();

				replyRepyCommentList = GetReplyComments(replyReplyComments);

				replyCommentDetails.RepliedComments = replyRepyCommentList;
				replyCommentList.Add(replyCommentDetails);

			}
			return replyCommentList;
		}
		#endregion GetResourceComments

		#region GetResourceDetailsInfo

		public IAFCHandBookResourceDetailsModel GetResourceDetailsInfo(DynamicContent resource, Guid? categoryId, bool isMyHandBookItem = false)
		{
			return GetResourceDetailsInfoNext(resource, categoryId, isMyHandBookItem);
		}

		#endregion GetResourceDetailsInfo

		#region GetResourceDetails

		#region GetResourceDetails by Item

		public IAFCHandBookResourceModel GetResourceDetails(DynamicContent resource, Guid? categoryId, bool isMyHandBookItem = false, string userId = null, string orderBy = OrderByMostPopular)
		{
			return GetResourceDetailsNext(resource, categoryId, isMyHandBookItem, userId, orderBy);
		}
	

		public IAFCHandBookResourceModel GetResourceDetailsUI(DynamicContent resource, string categoryName, bool isMyHandBookItem = false, string orderBy = OrderByMostPopular)
		{
			TaxonomyManager taxonomyManager = TaxonomyManager.GetManager();
			var categoryId = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(t => t.Name == categoryName).Select(t => t.Id).FirstOrDefault();
			if (categoryId == Guid.Empty)
			{
				return null; 
			}
			return GetResourceDetails(resource, categoryId, isMyHandBookItem, null, orderBy);
		}


		#endregion GetResourceDetails by Item

		#region GetResourceDetails by Name
		public IAFCHandBookResourceModel GetResourceDetails(String name, Guid? categoryId = null, string orderBy = OrderByMostPopular)
		{
			var model = new IAFCHandBookResourceModel();
			try
			{
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();

				var resourceItem = dynamicModuleManager.GetDataItems(handBookResourcesType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && d.UrlName == name)
							.FirstOrDefault();

				if (resourceItem==null)
				{
					return null;
				}
				model = GetResourceDetails(resourceItem, categoryId, false, null, orderBy);
				if (model==null)
				{
					return null;
				}
				model.MoreResources = GetMoreResources(resourceItem.Id, model.ResourceDetails.Category.Id);
				model.Comments = GetResourceComments(resourceItem);
			}
			catch (Exception e)
			{
				log.Error("GetResourceDetails Error: " + e.StackTrace);
			}

			return model;
		}

		public IAFCHandBookResourceModel GetResourceDetailsUI(String name, string categoryName = null, string orderby = OrderByMostPopular)
		{
			TaxonomyManager taxonomyManager = TaxonomyManager.GetManager();
			var categoryId = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(t => t.Name == categoryName).Select(t => t.Id).FirstOrDefault();
			if (categoryId == Guid.Empty)
			{
				return null;
			}
			return GetResourceDetails(name, categoryId, orderby);
		}
		
			#endregion GetResourceDetails by Name

			#endregion GetResourceDetails

			#region GetFeaturedResources

			public IAFCHandBookResourceModel GetFeaturedResourcesData()
		{
			return GetFeaturedResourcesDataNext();
		}

		#endregion GetFeaturedResources

		#region GetRecentlyAddedResources

		public List<IAFCHandBookResourceModel> GetRecentlyAddedResources()
		{
			return GetRecentlyAddedResourcesNext();
		}

		#endregion GetRecentlyAddedResources

		#region GetResourcesPerCategory

		public IAFCHandBookResourcesPerCatergoryModel GetResourcesPerCategory(string categoryName, string orderBy)
		{
			return GetResourcesPerCategoryNext(categoryName, orderBy);
		}

		#endregion GetResourcesPerCategory		

		#region GetMoreResources
		public List<IAFCHandBookMoreResourcesModel> GetMoreResources(Guid resourceId, Guid categoryID)
		{
			return GetMoreResourcesNext(resourceId, categoryID);
		}
		#endregion GetMoreResources

		#region Categories Methods

		#region GetMoreCategories
		private List<IAFCHandBookTopicCategoryModel> GetMoreCategories(Guid categoryId, string sharedUrl)
		{
			TaxonomyManager taxonomyManager = TaxonomyManager.GetManager();
			var moreTopicCategories = new List<IAFCHandBookTopicCategoryModel>();
			var moreTopicCategoriesID = new List<Guid>();
			var currentResourceCategory = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Id == categoryId).First();

			var topicCategory = GetTopicCategories(categoryId);
			var parentCategoryTitle = topicCategory.ResourceParentCategoryTitle;

			switch (parentCategoryTitle)
			{
				case LeadershipCategoryTitle:
					moreTopicCategoriesID = topicLeadershipCategories.Where(c => c != categoryId).ToList();
					break;
				case CommunityCategoryTitle:
					moreTopicCategoriesID = topicCommunityRelationsCategories.Where(c => c != categoryId).ToList();
					break;
				case FinanceCategoryTitle:
					moreTopicCategoriesID = topicFinanceCategories.Where(c => c != categoryId).ToList();
					break;
				case PersonnelCategoryTitle:
					moreTopicCategoriesID = topicPersonnelCategories.Where(c => c != categoryId).ToList();
					break;
			}

			foreach (var id in moreTopicCategoriesID)
			{
				var categoryResourceAmount = GetResourcesAmountPerCategory(id);
				var newTopicCategory = new IAFCHandBookTopicCategoryModel();


				var topicCategoryDetails = GetTopicCategories(id);

				newTopicCategory.Id = id;
				newTopicCategory.CategoryDescription = topicCategoryDetails.ResourceCategoryDescription;
				newTopicCategory.CategoryTitle = topicCategoryDetails.ResourceCategoryTile;
				newTopicCategory.CategoryUrl = topicCategoryDetails.ResourceCategoryUrl;
				newTopicCategory.TopicCategoryImageUrl = topicCategoryDetails.ResourceParentCategoryImageUrl;
				newTopicCategory.ResourcesAmount = categoryResourceAmount;
				newTopicCategory.MyHandBookCategoryUrl = topicCategoryDetails.MyHandbookResourceCategoryUrl + sharedUrl;
				newTopicCategory.MyHandBookParentCategoryUrl = topicCategoryDetails.MyHandbookResourceParentCategoryUrl + sharedUrl;
				newTopicCategory.CategoryClass = topicCategoryDetails.CategoryClass;
				newTopicCategory.CategorySvg = topicCategoryDetails.CategoryImage.Url;
				newTopicCategory.CategoryAlt = topicCategoryDetails.CategoryImage.AlternativeText;
				newTopicCategory.ParentCategoryTitle = topicCategoryDetails.ResourceParentCategoryTitle;
				moreTopicCategories.Add(newTopicCategory);
			}


			return moreTopicCategories;
		}
		#endregion GetMoreCategories

		#region CategoryListResources
		public IAFCHandBookCategoryResourcesModel CategoryListResources(string categoryName)
		{
			var model = new IAFCHandBookCategoryResourcesModel();
			var categoryId = GetCategoryGuidByName(categoryName);

			var categoryListResourcesIDs = new List<Guid>();
			var topicCategory = GetTopicCategories(categoryId);

			model.ParenCategory.Id = categoryId;
			model.ParenCategory.CategoryDescription = topicCategory.ResourceCategoryDescription;
			model.ParenCategory.CategoryTitle = topicCategory.ResourceCategoryTile;
			model.ParenCategory.CategoryUrl = topicCategory.ResourceCategoryUrl;
			model.ParenCategory.TopicCategoryImageUrl = topicCategory.ResourceParentCategoryImageUrl;
			model.ParenCategory.MyHandBookCategoryUrl = topicCategory.MyHandbookResourceCategoryUrl;
			model.ParenCategory.MyHandBookParentCategoryUrl = topicCategory.MyHandbookResourceParentCategoryUrl;
			model.ParenCategory.CategoryClass = topicCategory.CategoryClass;
			model.ParenCategory.CategorySvg = topicCategory.CategoryImage.Url;
			model.ParenCategory.CategoryAlt = topicCategory.CategoryImage.AlternativeText;

			switch (topicCategory.ResourceCategoryTile)
			{
				case LeadershipCategoryTitle:
					categoryListResourcesIDs = topicLeadershipCategories;
					break;
				case CommunityCategoryTitle:
					categoryListResourcesIDs = topicCommunityRelationsCategories;
					break;
				case FinanceCategoryTitle:
					categoryListResourcesIDs = topicFinanceCategories;
					break;
				case PersonnelCategoryTitle:
					categoryListResourcesIDs = topicPersonnelCategories;
					break;
			}

			foreach (var id in categoryListResourcesIDs)
			{
				var categoryResourceAmount = GetResourcesAmountPerCategory(id);
				var childTopicCategory = new IAFCHandBookTopicCategoryModel();
				var childCategoryDetails = GetTopicCategories(id);

				childTopicCategory.Id = id;
				childTopicCategory.CategoryDescription = childCategoryDetails.ResourceCategoryDescription;
				childTopicCategory.CategoryTitle = childCategoryDetails.ResourceCategoryTile;
				childTopicCategory.CategoryUrl = childCategoryDetails.ResourceCategoryUrl;
				childTopicCategory.TopicCategoryImageUrl = childCategoryDetails.ResourceParentCategoryImageUrl;
				childTopicCategory.ResourcesAmount = categoryResourceAmount;
				childTopicCategory.MyHandBookCategoryUrl = childCategoryDetails.MyHandbookResourceCategoryUrl;
				childTopicCategory.MyHandBookParentCategoryUrl = childCategoryDetails.MyHandbookResourceParentCategoryUrl;
				childTopicCategory.CategoryClass = childCategoryDetails.CategoryClass;
				childTopicCategory.CategorySvg = childCategoryDetails.CategoryImage.Url;
				childTopicCategory.CategoryAlt = childCategoryDetails.CategoryImage.AlternativeText;
				model.ChildCategories.Add(childTopicCategory);
			}

			return model;
		}
		#endregion CategoryListResources

		#region GetResourcesAmountPerCategory

		private int GetResourcesAmountPerCategory(Guid categoryId)
		{
			return GetResourcesAmountPerCategoryNext(categoryId);
		}

		#endregion GetResourcesAmountPerCategory

		#endregion Categories Methods

		#region Likes

		#region Add Like
		public int AddLikeForResource(Guid resourceID, string resourceType, bool isAdding )
		{
			int currentLikes = 0;

			try
			{
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();

				string commentFieldText = "Likes";
				var resourceTypeItem = handBookResourcesType;

				if (resourceType == commentResource)
				{
					resourceTypeItem = resourceCommentsType;
					commentFieldText = "CommentLikes";
				}

				var resource = dynamicModuleManager.GetDataItem(resourceTypeItem, resourceID);
				var resourceLike = resource.GetRelatedItems(commentFieldText).Cast<DynamicContent>().First();
				currentLikes = Convert.ToInt32(resourceLike.GetValue("AmountOfLikes"));

				if ((isAdding && !IsResourceLiked(resourceLike.Id)) || (!isAdding && IsResourceLiked(resourceLike.Id)))
				{
					if (isAdding)
					{
						currentLikes = currentLikes + 1;
					}
					else
					{
						currentLikes = currentLikes - 1;
					}
					if (currentLikes >= 0)
					{
						var masterResourceLike = dynamicModuleManager.Lifecycle.GetMaster(resourceLike);
						DynamicContent checkOutLikeItem = dynamicModuleManager.Lifecycle.CheckOut(masterResourceLike) as DynamicContent;
						checkOutLikeItem.SetValue("AmountOfLikes", currentLikes);
						ILifecycleDataItem checkInLikeItem = dynamicModuleManager.Lifecycle.CheckIn(checkOutLikeItem);
						dynamicModuleManager.Lifecycle.Publish(checkInLikeItem);

						if (resourceTypeItem == handBookResourcesType)
						{
							var resourceMaster = dynamicModuleManager.Lifecycle.GetMaster(resource);
							var resourceTemp = dynamicModuleManager.Lifecycle.CheckOut(resourceMaster) as DynamicContent;

							resourceTemp.SetValue("AmountOfLikes", currentLikes);

							resourceMaster = dynamicModuleManager.Lifecycle.CheckIn(resourceTemp);
							dynamicModuleManager.Lifecycle.Publish(resourceMaster);
						}

						dynamicModuleManager.SaveChanges();

						if (isAdding)
						{
							AddToLikedResources(resourceLike.Id);
						}
						else
						{
							RemoveFromLikedResources(resourceLike.Id);
						}
					}
				}

			}
			catch (Exception e)
			{
				log.Error("add like error " + e.Message);
			}

			return currentLikes;
		}

		#endregion Add Like

		#region Add Dislike

		public int AddDislikeForResource(Guid resourceID, string resourceType, bool isAdding )
		{
			int currentDislikes = 0;

			try
			{
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();

				string commentFieldText = "Likes";
				var resourceTypeItem = handBookResourcesType;

				if (resourceType == commentResource)
				{
					resourceTypeItem = resourceCommentsType;
					commentFieldText = "CommentLikes";
				}

				//Add DisLike to resource
				var resource = dynamicModuleManager.GetDataItem(resourceTypeItem, resourceID);
				var resourceDislike = resource.GetRelatedItems(commentFieldText).Cast<DynamicContent>().First();
				currentDislikes = Convert.ToInt32(resourceDislike.GetValue("AmountOfDislikes"));

				var masterResourceDislike = dynamicModuleManager.Lifecycle.GetMaster(resourceDislike);

				if ((isAdding && !IsResourceDisliked(resourceDislike.Id)) || (!isAdding && IsResourceDisliked(resourceDislike.Id)))
				{
					if (isAdding)
					{
						currentDislikes = currentDislikes + 1;
					}
					else
					{
						currentDislikes = currentDislikes - 1;
					}

					if (currentDislikes >= 0)
					{

						DynamicContent checkOutDislikeItem = dynamicModuleManager.Lifecycle.CheckOut(masterResourceDislike) as DynamicContent;
						checkOutDislikeItem.SetValue("AmountOfDislikes", currentDislikes);
						ILifecycleDataItem checkInDislikeItem = dynamicModuleManager.Lifecycle.CheckIn(checkOutDislikeItem);
						dynamicModuleManager.Lifecycle.Publish(checkInDislikeItem);

						if (resourceTypeItem == handBookResourcesType)
						{
							var resourceMaster = dynamicModuleManager.Lifecycle.GetMaster(resource);
							var resourceTemp = dynamicModuleManager.Lifecycle.CheckOut(resourceMaster) as DynamicContent;

							resourceTemp.SetValue("AmountOfDislikes", currentDislikes);

							resourceMaster = dynamicModuleManager.Lifecycle.CheckIn(resourceTemp);
							dynamicModuleManager.Lifecycle.Publish(resourceMaster);
						}

						dynamicModuleManager.SaveChanges();
						if (isAdding)
						{
							AddToDislikedResources(resourceDislike.Id);
						}
						else
						{
							RemoveFromDisLikedResources(resourceDislike.Id);
						}
					}
				}
			}
			catch (Exception e)
			{
				log.Error("add dislike error " + e.Message);
			}

			return currentDislikes;
		}

		#endregion Add Dislike

		#endregion Likes

		#region Comments
		public void CreateNewCommentForResource(Guid resourceID, string comment, string resourceType = resourceResource)
		{
			try
			{
				if (comment != null && comment.Trim() != String.Empty)
				{

					var providerName = String.Empty;
					var transactionName = "commentTransaction";

					string commentType = "Comment";
					var resourceTypeItem = handBookResourcesType;

					if (resourceType == commentResource)
					{
						commentType = "Reply";
						resourceTypeItem = resourceCommentsType;
					}

					DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);

					var resource = dynamicModuleManager.GetDataItem(resourceTypeItem, resourceID);
					var commentsAmount = resource.GetRelatedItems(commentType).Cast<DynamicContent>().Count() + 1;
					var commentTtitle = resource.GetValue("Title").ToString() + "_comment_" + commentsAmount.ToString();
					var likeTtitle = resource.GetValue("Title").ToString() + "_comment_" + commentsAmount.ToString() + "_like";

					//Create like for comment			
					DynamicContent mylikesmoduleItem = dynamicModuleManager.CreateDataItem(resourceLikesType);

					mylikesmoduleItem.SetValue("Title", likeTtitle);
					mylikesmoduleItem.SetValue("AmountOfLikes", 0);
					mylikesmoduleItem.SetValue("AmountOfDislikes", 0);
					mylikesmoduleItem.SetString("UrlName", new Lstring(Regex.Replace(likeTtitle, UrlNameCharsToReplace, UrlNameReplaceString)));
					mylikesmoduleItem.SetValue("Owner", SecurityManager.GetCurrentUserId());
					mylikesmoduleItem.SetValue("PublicationDate", DateTime.UtcNow);

					dynamicModuleManager.Lifecycle.Publish(mylikesmoduleItem);
					mylikesmoduleItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Published");

					//Create new Comment
					DynamicContent mycommentsItem = dynamicModuleManager.CreateDataItem(resourceCommentsType);
					mycommentsItem.SetValue("Title", commentTtitle);
					mycommentsItem.SetValue("CommentText", comment);
					mycommentsItem.SetString("UrlName", new Lstring(Regex.Replace(commentTtitle, UrlNameCharsToReplace, UrlNameReplaceString)));
					mycommentsItem.SetValue("Owner", SecurityManager.GetCurrentUserId());
					mycommentsItem.SetValue("PublicationDate", DateTime.UtcNow);

					mycommentsItem.CreateRelation(mylikesmoduleItem, "CommentLikes");

					ILifecycleDataItem publishedMycommentsItem = dynamicModuleManager.Lifecycle.Publish(mycommentsItem);
					mycommentsItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Published");

					//Add Comment to resource
					var masterResource = dynamicModuleManager.Lifecycle.GetMaster(resource);

					DynamicContent checkOutResourceItem = dynamicModuleManager.Lifecycle.CheckOut(masterResource) as DynamicContent;
					checkOutResourceItem.CreateRelation(mycommentsItem, commentType);

					if (resourceTypeItem == handBookResourcesType)
					{
						checkOutResourceItem.SetValue("AmountOfComments", commentsAmount);
					}

					ILifecycleDataItem checkInMyresourcesItem = dynamicModuleManager.Lifecycle.CheckIn(checkOutResourceItem);
					dynamicModuleManager.Lifecycle.Publish(checkInMyresourcesItem);

					TransactionManager.CommitTransaction(transactionName);
				}
			}
			catch (Exception e)
			{
				log.Error("Create Comment Error: " + e.Message);
			}

		}

		#endregion Comments

		#region MyHandBook

		#region GetCreateMyHandBook
		public DynamicContent GetOrCreateMyHandBook()
		{
			DynamicContent myHandBook = new DynamicContent();
			var providerName = String.Empty;
			var transactionName = "myHandBookTransaction";

			var model = new IAFCHandBookMyHandBookModel();
			var identity = ClaimsManager.GetCurrentIdentity();

			var currentUserGuid = identity.UserId;
			log.Info("GetOrCreateMyHandBook:" + currentUserGuid.ToString());
			try
			{
				if (currentUserGuid != Guid.Empty)
				{
					DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);

					var myHandBookModuleArray = dynamicModuleManager.GetDataItems(myHandBookType).
								Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live).ToArray();
					var myHandBookModuleData = myHandBookModuleArray.Where(u => u.GetValue<Guid>("UserId") == currentUserGuid);
					if (myHandBookModuleData.Any())
					{
						myHandBook = myHandBookModuleData.First();
					}
					else
					{
						DynamicContent myHandBookItem = dynamicModuleManager.CreateDataItem(myHandBookType);


						var userFullName = String.Empty;
						userFullName = GetUserName(currentUserGuid);

						var myHandBookTitle = "MyHandBook_" + userFullName;

						myHandBookItem.SetValue("Title", myHandBookTitle);
						myHandBookItem.SetValue("UserId", currentUserGuid);						
						myHandBookItem.SetString("UrlName", new Lstring(Regex.Replace(myHandBookTitle, UrlNameCharsToReplace, UrlNameReplaceString)));
						myHandBookItem.SetValue("Owner", SecurityManager.GetCurrentUserId());
						myHandBookItem.SetValue("PublicationDate", DateTime.UtcNow);


						dynamicModuleManager.Lifecycle.Publish(myHandBookItem);
						myHandBookItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Published");
						TransactionManager.CommitTransaction(transactionName);

						myHandBook = myHandBookItem;
					}
				}
			}
			catch (Exception e)
			{
				log.Error("MyHandbook" + e.Message);
			}

			return myHandBook;
		}
		#endregion GetCreateMyHandBook

		#region GetMyHandBookByID
		public DynamicContent GetMyHandBookByID(Guid userId)
		{
			DynamicContent myHandBook = new DynamicContent();
			var providerName = String.Empty;
			var transactionName = "myHandBookTransaction";

			var model = new IAFCHandBookMyHandBookModel();
			try
			{
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);

				var myHandBookModuleArray = dynamicModuleManager.GetDataItems(myHandBookType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live).ToArray();
				var myHandBookModuleData = myHandBookModuleArray.Where(u => u.GetValue<Guid>("UserId") == userId);
				if (myHandBookModuleData.Any())
				{
					myHandBook = myHandBookModuleData.First();
				}
				else
				{
					return null;
				}
			}
			catch (Exception e)
			{
				log.Error("MyHandbook" + e.Message);
			}

			return myHandBook;
		}
		#endregion GetMyHandBookByID

		#region GetMyHandBook
		public IAFCHandBookMyHandBookModel GetMyHandBook(String userId = null)
		{
			Guid userGuid;									
			if((userId==null && !isUserAuthorized)||(userId!=null &&!Guid.TryParse(userId, out userGuid)))
			{
				return null;
			}
			return GetMyHandBookNext(userId);
		}
		#endregion GetMyHandBook

		#region GetTotalDuration
		public TimeSpan GetTotalDuration(List<DynamicContent> resources)
		{
			return GetTotalDurationNext(resources);
		}
		#endregion GetTotalDuration

		#region AddToMyHandBook
		public Boolean AddToMyHandBook(Guid resourceId)
		{
			Boolean returnData = false;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
				var resource = dynamicModuleManager.GetDataItems(handBookResourcesType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && d.Id == resourceId).First();

				var masterResource = dynamicModuleManager.Lifecycle.GetMaster(resource);
				var masterHandBook = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);

				masterHandBook.CreateRelation(masterResource, "MyResources");

				dynamicModuleManager.Lifecycle.Publish(masterHandBook);
				dynamicModuleManager.SaveChanges();

				returnData = true;
			}
			catch (Exception e)
			{
				log.Error("AddToMyHandBook Error: " + e.Message);
			}
			return returnData;
		}

		#endregion AddToMyHandBook

		#region AddAllToMyHandBook
		public Boolean AddAllToMyHandBook(Guid categoryId)
		{
			Boolean returnData = false;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
				var resourceList = dynamicModuleManager.GetDataItems(handBookResourcesType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live)
							.Where(r => r.GetValue<IList<Guid>>("Category").Contains(categoryId))
							.ToArray();



				var masterHandBook = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);

				foreach (var resourceItem in resourceList)
				{
					if (!IsResourceAddedToMyHandBook(resourceItem.Id) && !IsResourceMarkedAsComplete(resourceItem.Id))
					{
						var masterResourcrItem = dynamicModuleManager.Lifecycle.GetMaster(resourceItem);
						masterHandBook.CreateRelation(masterResourcrItem, "MyResources");
					}
				}

				dynamicModuleManager.Lifecycle.Publish(masterHandBook);
				dynamicModuleManager.SaveChanges();

				returnData = true;
			}
			catch (Exception e)
			{
				log.Error("AddToMyHandBook Error: " + e.Message);
			}
			return returnData;
		}

		#endregion AddAllToMyHandBook

		#region MarkAsComplete
		public Boolean MarkAsComplete(Guid resourceId)
		{
			Boolean returnData = false;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();

				var resource = dynamicModuleManager.GetDataItems(handBookResourcesType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && d.Id == resourceId).First();

				var masterResource = dynamicModuleManager.Lifecycle.GetMaster(resource);
				var masterHandBook = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);

				masterHandBook.CreateRelation(masterResource, "MyCompletedResources");
				masterHandBook.DeleteRelation(masterResource, "MyResources");

				dynamicModuleManager.Lifecycle.Publish(masterHandBook);
				dynamicModuleManager.SaveChanges();

				returnData = true;
			}
			catch (Exception e)
			{
				log.Error("MarkAsComplete Error: " + e.Message);
			}
			return returnData;
		}
		#endregion MarkAsComplete

		#region RemoveResource
		public Boolean RemoveResource(Guid resourceId, String fieldName = "MyResources")
		{
			Boolean returnData = false;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();

				var resource = dynamicModuleManager.GetDataItems(handBookResourcesType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && d.Id == resourceId).First();

				var masterResource = dynamicModuleManager.Lifecycle.GetMaster(resource);
				var masterHandBook = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);


				masterHandBook.DeleteRelation(masterResource, fieldName);

				dynamicModuleManager.Lifecycle.Publish(masterHandBook);
				dynamicModuleManager.SaveChanges();

				returnData = true;
			}
			catch (Exception e)
			{
				log.Error("RemoveResource Error: " + e.Message);
			}
			return returnData;
		}
		#endregion RemoveResource

		#region IsResourceAddedToMyHandBook
		public Boolean IsResourceAddedToMyHandBook(Guid resourceId)
		{

			Boolean returnData = false;
			var i = 0;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				var providerName = String.Empty;
				var transactionName = "myHandBookTransaction";

				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);

				var myHandBookResources = myHandBookItem.GetRelatedItems("MyResources").Cast<DynamicContent>().ToArray();

				var handBookResourceAdded = myHandBookResources.Where(r => r.Id == resourceId).Any();
				returnData = handBookResourceAdded;
			}
			catch (Exception e)
			{
				log.Error("IsResourceAddedToMyHandBook Error: " + e.Message);
			}
			return returnData;
		}
		#endregion IsResourceAddedToMyHandBook

		#region IsResourceMarkedAsComplete
		public Boolean IsResourceMarkedAsComplete(Guid resourceId)
		{

			Boolean returnData = false;
			var i = 0;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				var providerName = String.Empty;
				var transactionName = "myHandBookTransaction";

				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);

				var myHandBookResources = myHandBookItem.GetRelatedItems("MyCompletedResources").Cast<DynamicContent>().ToArray();

				var handBookResourceAdded = myHandBookResources.Where(r => r.Id == resourceId).Any();
				returnData = handBookResourceAdded;
			}
			catch (Exception e)
			{
				log.Error("IsResourceMarkedAsComplete Error: " + e.Message);
			}
			return returnData;
		}
		#endregion IsResourceMarkedAsComplete

		#region AddToLikedResources
		public Boolean AddToLikedResources(Guid resourceId)
		{
			Boolean returnData = false;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
				var like = dynamicModuleManager.GetDataItems(resourceLikesType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && d.Id == resourceId).First();

				var masterLike = dynamicModuleManager.Lifecycle.GetMaster(like);
				var masterHandBook = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);

				masterHandBook.CreateRelation(masterLike, "likedResources");

				dynamicModuleManager.Lifecycle.Publish(masterHandBook);
				dynamicModuleManager.SaveChanges();

				returnData = true;
			}
			catch (Exception e)
			{
				log.Error("AddToLikedResources Error: " + e.Message);
			}
			return returnData;
		}

		#endregion AddToLikedResources

		#region RemoveFromLikedResources
		public Boolean RemoveFromLikedResources(Guid resourceId)
		{
			Boolean returnData = false;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();

				var like = dynamicModuleManager.GetDataItems(resourceLikesType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && d.Id == resourceId).First();

				var masterLike = dynamicModuleManager.Lifecycle.GetMaster(like);
				var masterHandBook = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);
				
				masterHandBook.DeleteRelation(masterLike, "likedResources");

				dynamicModuleManager.Lifecycle.Publish(masterHandBook);
				dynamicModuleManager.SaveChanges();

				returnData = true;
			}
			catch (Exception e)
			{
				log.Error("RemoveFromLikedResources Error: " + e.Message);
			}
			return returnData;
		}
		#endregion RemoveFromLikedResources

		#region AddToDislikedResources
		public Boolean AddToDislikedResources(Guid resourceId)
		{
			Boolean returnData = false;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
				var like = dynamicModuleManager.GetDataItems(resourceLikesType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && d.Id == resourceId).First();

				var masterLike = dynamicModuleManager.Lifecycle.GetMaster(like);
				var masterHandBook = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);

				masterHandBook.CreateRelation(masterLike, "dislikedResources");

				dynamicModuleManager.Lifecycle.Publish(masterHandBook);
				dynamicModuleManager.SaveChanges();

				returnData = true;
			}
			catch (Exception e)
			{
				log.Error("AddToDislikedResources Error: " + e.Message);
			}
			return returnData;
		}

		#endregion AddToLDisikedResources

		#region RemoveFromDisLikedResources
		public Boolean RemoveFromDisLikedResources(Guid resourceId)
		{
			Boolean returnData = false;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();

				var dislike = dynamicModuleManager.GetDataItems(resourceLikesType).
							Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && d.Id == resourceId).First();

				var masterDislike = dynamicModuleManager.Lifecycle.GetMaster(dislike);
				var masterHandBook = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);

				masterHandBook.DeleteRelation(masterDislike, "dislikedResources");

				dynamicModuleManager.Lifecycle.Publish(masterHandBook);
				dynamicModuleManager.SaveChanges();

				returnData = true;
			}
			catch (Exception e)
			{
				log.Error("RemoveFromLikedResources Error: " + e.Message);
			}
			return returnData;
		}
		#endregion RemoveFromDisLikedResources

		#region IsResourceLiked
		public Boolean IsResourceLiked(Guid resourceId)
		{

			Boolean returnData = false;

			try
			{
				if (isUserAuthorized)
				{
					var myHandBookItem = GetOrCreateMyHandBook();

					var providerName = String.Empty;
					var transactionName = "myHandBookTransaction";

					DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);

					var myHandBookResources = myHandBookItem.GetRelatedItems("likedResources").Cast<DynamicContent>().ToArray();

					var handBookResourceAdded = myHandBookResources.Where(r => r.Id == resourceId).Any();
					returnData = handBookResourceAdded;
				}
			}
			catch (Exception e)
			{
				log.Error("IsResourceLiked Error: " + e.Message);
			}
			return returnData;
		}
		#endregion IsResourceLiked

		#region IsResourceDisLiked
		public Boolean IsResourceDisliked(Guid resourceId)
		{

			Boolean returnData = false;

			try
			{
				if (isUserAuthorized)
				{
					var myHandBookItem = GetOrCreateMyHandBook();

					var providerName = String.Empty;
					var transactionName = "myHandBookTransaction";

					DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);

					var myHandBookResources = myHandBookItem.GetRelatedItems("dislikedResources").Cast<DynamicContent>().ToArray();

					var handBookResourceAdded = myHandBookResources.Where(r => r.Id == resourceId).Any();
					returnData = handBookResourceAdded;
				}
			}
			catch (Exception e)
			{
				log.Error("IsResourceDisLiked Error: " + e.Message);
			}
			return returnData;
		}
		#endregion IsResourceDisLiked

		#region MyHandBookGetResourcesPerCategory
		public IAFCHandBookMyHandBookModel GetMyHandBookResourcesPerCategory(String categoryName, String userId = null)
		{
			Guid userGuid;
			var categoryId = GetCategoryGuidByName(categoryName);
			if ((userId == null && !isUserAuthorized) || (userId != null && !Guid.TryParse(userId, out userGuid)) || (categoryId==Guid.Empty))
			{
				return null;
			}
			

			return GetMyHandBookResourcesPerCategoryNext(categoryName, userId);
		}
		#endregion MyHandBookGetResourcesPerCategory

		#region GetCategoryResources
		public IAFCHandBookMyHandBookResourceModelModel GetCategoryResources(Guid categoryId, bool showAllResources, string userId = null, string orderBy = OrderByMostRecent)
		{
			return GetCategoryResourcesNext(categoryId, showAllResources, userId, orderBy);
		}
		#endregion GetCategoryResources

		#region GetMyHandBookCategoryResources
		public IAFCHandBookMyHandBookResourceModelModel GetMyHandBookCategoryResourcesByName(String categoryName, String userId = null, String orderBy = OrderByMostRecent)
		{
			var categoryId = GetCategoryGuidByName(categoryName);
			Guid userGuid;			
			if ((userId == null && !isUserAuthorized) || (userId != null && !Guid.TryParse(userId, out userGuid)) || (categoryId == Guid.Empty))
			{
				return null;
			}
			var model = new IAFCHandBookMyHandBookResourceModelModel();
			model = GetCategoryResources(categoryId, true, userId, orderBy);
			return model;
		}
		#endregion GetMyHandBookCategoryResources

		#region GetMyHandBookCategoryResources
		public List<IAFCHandBookResourceModel> GetMyHandBookCategoryResourcesDetails(List<DynamicContent> resourcesList, int resourcesAmount = 0)
		{
			var model = new List<IAFCHandBookResourceModel>();
			var resourceItemModel = new IAFCHandBookResourceModel();

			var resources = resourcesList.OrderByDescending(r => r.DateCreated);
			if (resourcesAmount != 0)
			{
				resources.Take(resourcesAmount);
			}

			foreach (var resourceItem in resources)
			{
				resourceItemModel = GetResourceDetails(resourceItem, null, true);
				model.Add(resourceItemModel);
			}

			return model;
		}

		public List<IAFCHandBookResourceModel> GetMyHandBookCategoryResourcesList(Guid categoryId)
		{
			return GetMyHandBookCategoryResourcesListNext(categoryId);
		}


		#endregion GetMyHandBookCategoryResources

		#region Get My Hnadbook ResourceDetails by Name
		public IAFCHandBookResourceModel GetMyHnadbookResourceDetails(string name, Guid? categoryId = null, string userId= null, string orderBy= OrderByMostPopular)
		{
			Guid userGuid;
			if ((userId == null && !isUserAuthorized) || (userId != null && !Guid.TryParse(userId, out userGuid)))
			{
				return null;
			}
			return GetMyHnadbookResourceDetailsNext(name, categoryId, userId, orderBy);
		}

		public IAFCHandBookResourceModel GetMyHnadbookResourceDetailsUI(string name, string categoryName = null, string userId=null, string orderBy = OrderByMostPopular)
		{
			Guid userGuid;
			if ((userId == null && !isUserAuthorized) || (userId != null && !Guid.TryParse(userId, out userGuid)))
			{
				return null;
			}
			Guid? categoryId = null;
			if(categoryName !=null)
			{
				TaxonomyManager taxonomyManager = TaxonomyManager.GetManager();
				categoryId = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(t => t.Name == categoryName).Select(t => t.Id).FirstOrDefault();
				if (categoryId == Guid.Empty)
				{
					return null;
				}
			}

			return GetMyHnadbookResourceDetails(name, categoryId, userId, orderBy);
		}
		#endregion Get My Hnadbook ResourceDetails by Name

		#region Get My Hand Book MoreResources
		public List<IAFCHandBookMoreResourcesModel> GetMyHandBookMoreResources(Guid resourceId, Guid categoryID, string userId = null)
		{
			return GetMyHandBookMoreResourcesNext(resourceId, categoryID, userId);
		}
		#endregion Get My Hand Book MoreResources

		#region generateSharedUrl
		public string GenerateSharedUrl(String url)
		{
			var returnUrl = String.Empty;
			returnUrl = url + "/" + SecurityManager.GetCurrentUserId().ToString();
			return returnUrl;
		}

		#endregion generateSharedUrl

		#endregion MyHandBook

		#region Menu
		public IAFCHandBookMyHandBookMenuModel GetMenu(String urlPath)
		{
			IAFCHandBookMyHandBookMenuModel model = new IAFCHandBookMyHandBookMenuModel();
			var isUserSignIn = IsUserAuthorized();
			model.IsUserAuthorized = isUserSignIn;
			var topicMenuItem = new IAFCHandBookMyHandBookMenuItemModel();
			topicMenuItem.Title = "TOPICS";
			topicMenuItem.Url = String.Empty;
			topicMenuItem.Visible = true;
			foreach (var categoryItem in topicParentCategories)
			{
				var menuItem = new IAFCHandBookMyHandBookMenuItemModel();
				var categoryDetails = GetTopicCategories(categoryItem);

				menuItem.Title = categoryDetails.ResourceCategoryTile;
				menuItem.Visible = true;
				menuItem.Url = String.Empty;
				foreach (var childCategoryItem in GetChildCategories(categoryItem))
				{
					var childMenuItem = new IAFCHandBookMyHandBookMenuItemModel();
					var childCategoryDetails = GetTopicCategories(childCategoryItem);
					childMenuItem.Title = childCategoryDetails.ResourceCategoryTile;
					childMenuItem.Url = childCategoryDetails.ResourceCategoryUrl;
					childMenuItem.Visible = true;
					menuItem.ChildMenuItem.Add(childMenuItem);
				}
				topicMenuItem.ChildMenuItem.Add(menuItem);
			}
			model.Menu.Add(topicMenuItem);


			var otherMenuItem = new IAFCHandBookMyHandBookMenuItemModel();
			otherMenuItem.Title = "MY A-RIT";
			otherMenuItem.Url = MainPage + "/my-a-rit/";
			otherMenuItem.Visible = isUserSignIn;
			model.Menu.Add(otherMenuItem);

			otherMenuItem = new IAFCHandBookMyHandBookMenuItemModel();
			otherMenuItem.Title = "ACCOUNT";
			otherMenuItem.Url = MainPage + "/account/";
			otherMenuItem.Visible = isUserSignIn;
			model.Menu.Add(otherMenuItem);

			otherMenuItem = new IAFCHandBookMyHandBookMenuItemModel();
			otherMenuItem.Title = "LOGIN/SIGN UP";
			otherMenuItem.Url = "/Mxg/AuthService/SignInByHelix/?ReturnUrl=" + urlPath;
			otherMenuItem.Visible = !isUserSignIn;
			model.Menu.Add(otherMenuItem);

			otherMenuItem = new IAFCHandBookMyHandBookMenuItemModel();
			otherMenuItem.Title = "LOGOUT";
			otherMenuItem.Url = "/Mxg/AuthService/SignOut";
			otherMenuItem.Visible = isUserSignIn;
			model.Menu.Add(otherMenuItem);

			return model;
		}

		#endregion Menu

		#region GetSearchedResources

		public IAFCHandBookSearchedResourcesModel GetSearchedResourcres(string searchText, string orderBy = OrderByMostRecent)
		{
			var model = new IAFCHandBookSearchedResourcesModel();
			model.SearchText = searchText;

			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();

			var searchedResources = dynamicModuleManager.GetDataItems(handBookResourcesType)
				.Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live && ((d.GetValue<string>("Title").Contains(searchText))
																							||(d.GetValue<string>("ResourceDescription").Contains(searchText))
																							|| (d.GetValue<string>("shortsummary").Contains(searchText)))
																							);

			var searchedResourcesList = new List<DynamicContent>();
			if (orderBy == OrderByTopic)
			{
				searchedResourcesList = searchedResources.ToList()
					.OrderBy(r => categoriesDictionaly[r.GetValue<IList<Guid>>("Category").Where(c => topicCategories.Contains(c)).First()].ResourceCategoryTile).ToList();
			}
			else if (orderBy == OrderByMostRecent)
			{
				searchedResourcesList = searchedResources.OrderByDescending(r => r.DateCreated).ToList(); ;
			}
			else if (orderBy == OrderByMostPopular)
			{
				searchedResourcesList = searchedResources.OrderByDescending(r => r.GetValue<decimal?>("AmountOfLikes")).ToList(); ;
			}
			else if (orderBy == OrderByAlphabeticalAZ)
			{
				searchedResourcesList = searchedResources.OrderBy(r => r.GetValue<string>("Title")).ToList(); ;
			}
			else if (orderBy == OrderByAlphabeticalZA)
			{
				searchedResourcesList = searchedResources.OrderByDescending(r => r.GetValue<string>("Title")).ToList(); ;
			}

			var listOfMyResources = new List<IAFCHandBookResourceModel>();

			foreach (var res in searchedResourcesList)
			{
				var handBookResource = GetResourceDetailsNext(res, null);
				listOfMyResources.Add(handBookResource);
			}
			model.Resources = listOfMyResources;
			var orderByList = InitOrderBy(orderBy, "", true);
			model.OrderBy = orderByList;

			return model;
		}


		#endregion GetSearchedResources		

		#region SendEmails
		private void SendEmails(List<ISubscriberRequest> subscribers)
		{
			try
			{
				var ns = SystemManager.GetNotificationService();
				var context = new ServiceContext("myNotificationAccount", "MyCustomModule");

				var contextDictionary = new Dictionary<string, string>();
				contextDictionary.Add("MergeData.Time", DateTime.UtcNow.ToString());

				var profileName = "IAFCHandBookNotification"; //Name of an existing profile
				var subjectTemplate = "Test notification";
				var bodyTemplate = "Hi {|Subscriber.FirstName|} {|Subscriber.LastName|}, the time is: {|MergeData.Time|}";
				var tmpl = new MessageTemplateRequestProxy() { Subject = subjectTemplate, BodyHtml = bodyTemplate };

				IMessageJobRequest job = new MessageJobRequestProxy()
				{
					MessageTemplate = tmpl,
					Subscribers = subscribers,
					SenderProfileName = profileName
				};

				var messageJobId = ns.SendMessage(context, job, contextDictionary);

			}
			catch (Exception e)
			{
				log.Error("Sent Email Error:" + e.Message);
			}

		}
		#endregion SendEmails

		#region FollowCategory
		public Boolean FollowCategory(Guid categoryId)
		{
			Boolean returnData = false;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
				TaxonomyManager taxonomyManager = TaxonomyManager.GetManager();


				var masterHandBook = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);
				var checkOutHandBook = dynamicModuleManager.Lifecycle.CheckOut(masterHandBook) as DynamicContent;

				checkOutHandBook.Organizer.AddTaxa("Category", categoryId);				

				masterHandBook = dynamicModuleManager.Lifecycle.CheckIn(checkOutHandBook) as DynamicContent;
				dynamicModuleManager.Lifecycle.Publish(masterHandBook);
				dynamicModuleManager.SaveChanges();

				returnData = true;
			}
			catch (Exception e)
			{
				log.Error("FollowCategory Error: " + e.Message);
			}
			return returnData;
		}

		#endregion FollowCategory

		#region IsCategoryFollowed
		public Boolean IsCategoryFollowed(Guid categoryId)
		{

			Boolean returnData = false;
			var i = 0;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				var providerName = String.Empty;
				var transactionName = "myHandBookTransaction";

				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(providerName, transactionName);

				var categoryFollowed = myHandBookItem.GetValue<IList<Guid>>("Category").Contains(categoryId);

				returnData = categoryFollowed;
			}
			catch (Exception e)
			{
				log.Error("IsCategoryFollowed Error: " + categoryId.ToString() + e.Message);
			}
			return returnData;
		}
		#endregion IsCategoryFollowed

		#region IsAllResourcesAddedToMyHandBook
		public Boolean IsAllResourcesAddedToMyHandBook(Guid categoryId)
		{

			Boolean returnData = false;
			var i = 0;
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();				
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();

				var myHandBookResources = myHandBookItem.GetRelatedItems("MyResources").Cast<DynamicContent>()
					.Where(r => r.GetValue<IList<Guid>>("Category").Contains(categoryId))
					.Count();
				var myHandBookCompletedResources = myHandBookItem.GetRelatedItems("MyCompletedResources").Cast<DynamicContent>()
					.Where(r => r.GetValue<IList<Guid>>("Category").Contains(categoryId))
					.Count();

				var allResourcesPerCaterory = dynamicModuleManager.GetDataItems(handBookResourcesType)
					.Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live)
					.Where(r => r.GetValue<IList<Guid>>("Category").Contains(categoryId)).Count();

				if ((allResourcesPerCaterory == myHandBookResources + myHandBookCompletedResources )&& allResourcesPerCaterory!=0)
				{
					returnData = true;
				}
			}
			catch (Exception e)
			{
				log.Error("IsAllResourcesAddedToMyHandBook Error: " + categoryId.ToString() + e.Message);
			}
			return returnData;
		}
		#endregion IsAllResourcesAddedToMyHandBook

		#region SendNotification
		private void SendNotification(Guid resourceId)
		{
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
				UserManager userManager = UserManager.GetManager();
				UserProfileManager profileManager = UserProfileManager.GetManager();
				List<ISubscriberRequest> subscribers = new List<ISubscriberRequest>();
				var resourceCategory = dynamicModuleManager.GetDataItems(handBookResourcesType)
					.Where(d => d.Id == resourceId)
					.ToArray()
					.Select(r => r.GetValue<IList<Guid>>("Category").Where(c => topicCategories.Contains(c)).First())
					.First();

				var handBookList = dynamicModuleManager.GetDataItems(myHandBookType)
					.Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live)
					.ToArray()
					.Where(h => h.GetValue<IList<Guid>>("Category").Contains(resourceCategory))
					.ToArray();

				var users = userManager.GetUsers();
				foreach (var handBook in handBookList)
				{
					var userId = handBook.GetValue<Guid>("UserId");
					User user = userManager.GetUser(userId);

					var profile = profileManager.GetUserProfile<SitefinityProfile>(user);
					var key = String.Empty;
					var firstName = String.Empty;
					var lastName = String.Empty;
					var email = String.Empty;
					if (profile != null)
					{

						email = profile.User.Email;
						firstName = profile.FirstName;
						lastName = profile.LastName;
						key = profile.GetKey();
					}
					else
					{
						firstName = user.FirstName;
						lastName = user.LastName;
						email = user.Email;
					}
					var subscriber = new SubscriberRequestProxy()
					{
						Email = email,
						FirstName = firstName,
						LastName = lastName,
						ResolveKey = userId.ToString()
					};
					subscribers.Add(subscriber);
				}

				SendEmails(subscribers);
			}
			catch (Exception e)
			{
				log.Error("Send Notification Error: " + e.Message);
			}
		}
		#endregion SendNotification

		#region GetAccount
		public IAFCHandBookAccount GetAccount()
		{
			IAFCHandBookAccount model = new IAFCHandBookAccount();
			try
			{
				var myHandBookItem = GetOrCreateMyHandBook();

				model.WeeklyUpdates = Convert.ToBoolean(myHandBookItem.GetValue("WeeklyUpdates"));
				model.MonthlyUpdates = Convert.ToBoolean(myHandBookItem.GetValue("MonthlyUpdates"));

				var foollowedCategories = myHandBookItem.GetValue<IList<Guid>>("Category").Where(c => topicCategories.Contains(c));

				foreach (var categoryId in foollowedCategories)
				{

					var category = new IAFCHandBookTopicCategoryModel();
					var topicCategoryDetails = GetTopicCategories(categoryId);

					category.Id = categoryId;
					category.CategoryTitle = topicCategoryDetails.ResourceCategoryTile;
					category.ParentCategoryTitle = topicCategoryDetails.ResourceParentCategoryTitle;

					model.FollowedCategories.Add(category);
				}

			}
			catch (Exception e)
			{
				log.Error("GetAccount " + e.Message);
			}

			return model;
		}
		#endregion GetAccount

		#region WeeklyUpdates
		public void WeeklyUpdates(bool value)
		{
			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
			var myHandBookItem = GetOrCreateMyHandBook();
			var masterHandBookItem = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);
			DynamicContent checkOutHandBookItem = dynamicModuleManager.Lifecycle.CheckOut(masterHandBookItem) as DynamicContent;
			checkOutHandBookItem.SetValue("WeeklyUpdates", value);
			ILifecycleDataItem checkInHandBookItem = dynamicModuleManager.Lifecycle.CheckIn(checkOutHandBookItem);
			dynamicModuleManager.Lifecycle.Publish(checkInHandBookItem);
			dynamicModuleManager.SaveChanges();
		}
		#endregion WeeklyUpdates

		#region MonthlyUpdates
		public void MonthlyUpdates(bool value)
		{
			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
			var myHandBookItem = GetOrCreateMyHandBook();
			var masterHandBookItem = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);
			DynamicContent checkOutHandBookItem = dynamicModuleManager.Lifecycle.CheckOut(masterHandBookItem) as DynamicContent;
			checkOutHandBookItem.SetValue("MonthlyUpdates", value);
			ILifecycleDataItem checkInHandBookItem = dynamicModuleManager.Lifecycle.CheckIn(checkOutHandBookItem);
			dynamicModuleManager.Lifecycle.Publish(checkInHandBookItem);
			dynamicModuleManager.SaveChanges();
		}
		#endregion MonthlyUpdates

		#region Unfollow
		public void Unfollow(Guid categoryId)
		{
			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
			var myHandBookItem = GetOrCreateMyHandBook();
			var categories = myHandBookItem.GetValue<TrackedList<Guid>>("Category")
				.ToArray()
				.Where(c => c != categoryId)
				.ToArray();

			var masterHandBookItem = dynamicModuleManager.Lifecycle.GetMaster(myHandBookItem);
			DynamicContent checkOutHandBookItem = dynamicModuleManager.Lifecycle.CheckOut(masterHandBookItem) as DynamicContent;
			checkOutHandBookItem.Organizer.Clear("Category");
			checkOutHandBookItem.Organizer.AddTaxa("Category", categories);
			ILifecycleDataItem checkInHandBookItem = dynamicModuleManager.Lifecycle.CheckIn(checkOutHandBookItem);
			dynamicModuleManager.Lifecycle.Publish(checkInHandBookItem);
			dynamicModuleManager.SaveChanges();
		}
		#endregion Unfollow

		#region getDefaultImageUrl
		public string GetDefaultImageUrl(string resourceType)
		{
			string imgUrl = String.Empty;

			return imgUrl;
		}
		#endregion getDefaultImageUrl

		public void InitResourceTypeImages()
		{
			LibrariesManager librariesManager = LibrariesManager.GetManager();
			Image image = librariesManager.GetImages().Where(i => i.UrlName=="video").FirstOrDefault();
			resourceTypeImages.Add("Video", image);
			image = librariesManager.GetImages().Where(i => i.UrlName == "webinar").FirstOrDefault();
			resourceTypeImages.Add("Webinar", image);
			image = librariesManager.GetImages().Where(i => i.UrlName == "article").FirstOrDefault();
			resourceTypeImages.Add("Article", image);
			image = librariesManager.GetImages().Where(i => i.UrlName == "resource-placeholder").FirstOrDefault();
			resourceTypeImages.Add("Placeholder", image);

			/*DefaultPodcastImgUrl;
			DefaultChartImgUrl;		
			DefaultLinkImgUrl;
			DefaultImageImgUrl;				
			DefaultAudioImgUrl;
			DefaultBookImgUrl;*/
		}

		public string GetUserName(Guid userId)
		{
			string userName = string.Empty;
			UserProfileManager profileManager = UserProfileManager.GetManager();
			UserManager userManager = UserManager.GetManager();

			User user = userManager.GetUser(userId);
			SitefinityProfile profile = null;

			if (user != null)
			{
				profile = profileManager.GetUserProfile<SitefinityProfile>(user);
				if (profile != null)
				{
					userName = profile.FirstName;
				}
				else
				{

					userName = user.FirstName;
				}
			}
			return userName;
		}

		public Image GetCategoryImage(Guid categoryId)
		{
			Image image = new Image();
			try
			{
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
				var categoryIcon = dynamicModuleManager.GetDataItems(categoryIcons)
					.Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live)
					.ToArray()
					.Where(r => r.GetValue<IList<Guid>>("Category").Contains(categoryId)).First();

				image = categoryIcon.GetRelatedItems<Image>("Icon").First();
				
			}
			catch (Exception e)
			{
				log.Error($@"{nameof(GetCategoryImage)} Error: {e.Message}");
			}
			return image;
		}

		public string PageNotFoundUrl()
		{
			string notFoundUrl = hostUrl + PageNotFound;
			return notFoundUrl;
		}

		public bool AddLikeForResourceUI(Guid resourceID, String resourceType, int likeAddAmount, int dislikeAddAmount)
		{
			try
			{
				bool lockTaken = false;
				Monitor.TryEnter(_likeLock, new TimeSpan(0,5,0),ref lockTaken);
				{
					if (lockTaken)
					{
						var isAddingLike = false;
						var isAddingDisLike = false;
						bool isAddedLikes = false;
						if (likeAddAmount == 1)
						{
							isAddingLike = true;
							AddLikeForResource(resourceID, resourceType, isAddingLike);
						}
						else if (likeAddAmount == -1)
						{
							isAddingLike = false;
							AddLikeForResource(resourceID, resourceType, isAddingLike);
						}

						if (dislikeAddAmount == 1)
						{
							isAddingDisLike = true;
							AddDislikeForResource(resourceID, resourceType, isAddingDisLike);
						}
						else if (dislikeAddAmount == -1)
						{
							isAddingDisLike = false;
							AddDislikeForResource(resourceID, resourceType, isAddingDisLike);
						}

						isAddedLikes = true;
						return isAddedLikes;
					}
					else
					{
						log.Error("AddLikeForResourceUI locked");
						return false;
					}
				}
			}
			finally
			{
				Monitor.Exit(_likeLock);
			}
		}

		public List<VWSARITResourcesListModel> GetVWSARITResources()
		{
			var model = new List<VWSARITResourcesListModel>();
			try
			{
				TaxonomyManager taxonomyManager = TaxonomyManager.GetManager();
				var ProjectVWSARITGuid = taxonomyManager.GetTaxa<HierarchicalTaxon>().Where(c => c.Name == ProjectVWSARIT).Select(c => c.Id).First();


				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
				var ProjectVWSARITExternalResourcesList = dynamicModuleManager.GetDataItems(externalResourcesType)
					.Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live)
					.ToArray()
					.Where(r => r.GetValue<TrackedList<Guid>>("feeding").Contains(ProjectVWSARITGuid)).ToList();

				var ProjectVWSARITResourcesList = dynamicModuleManager.GetDataItems(resourceType)
					.Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live)
					.ToArray()
					.Where(r => r.GetValue<TrackedList<Guid>>("feeding").Contains(ProjectVWSARITGuid));

				

				foreach (var item in ProjectVWSARITExternalResourcesList)
				{
					var externalResourceItemDetails = new VWSARITResourcesListModel();
					externalResourceItemDetails.Id = item.Id;
					externalResourceItemDetails.ResourceTitle = item.GetValue("Title").ToString();
					externalResourceItemDetails.CreatedDate = item.DateCreated;
					model.Add(externalResourceItemDetails);
				}

				foreach (var resourceItem in ProjectVWSARITResourcesList)
				{
					var resourceItemDetails = new VWSARITResourcesListModel();
					resourceItemDetails.Id = resourceItem.Id;
					resourceItemDetails.ResourceTitle = resourceItem.GetValue("Title").ToString();
					resourceItemDetails.CreatedDate = resourceItem.DateCreated;
					model.Add(resourceItemDetails);
				}
			}
			catch (Exception e)
			{
				log.Error("GetVWSARITResources Error: " + e.StackTrace);
			}

			return model.OrderByDescending(m=>m.CreatedDate).ToList();
		}

		public string GetUsers()
		{
			string returnData = string.Empty;



			try
			{
				DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
				var handBookArray = dynamicModuleManager.GetDataItems(myHandBookType)
							.Where(d => d.Visible == true && d.Status == ContentLifecycleStatus.Live)
							.ToArray();
				string csv = "User edit date, Helix ID, Ind ID, First Name, Last Name, Email, Date, Grp ID, ";
				foreach (var topicItem in topicCategories.Select(t => new { GetTopicCategories(t).ResourceCategoryTile, 
																			GetTopicCategories(t).ResourceParentCategoryTitle})
														.OrderBy(t=> t.ResourceParentCategoryTitle)
														.ThenBy(t=> t.ResourceCategoryTile))

				{
					
					csv = csv + "Opt-In " + topicItem.ResourceParentCategoryTitle + ": " + topicItem.ResourceCategoryTile +", ";
				}
				csv = csv + System.Environment.NewLine; 
				foreach (var handBookItem in handBookArray)
				{
					var handBookItemLine = string.Empty;
					var lastUpdatedDate = handBookItem.GetValue<DateTime>("LastModified");
					var userId = handBookItem.GetValue<Guid>("UserId");

					UserProfileManager profileManager = UserProfileManager.GetManager();
					UserManager userManager = UserManager.GetManager();
					User user = userManager.GetUser(userId);
					SitefinityProfile profile = null;
					String firstName = string.Empty;
					String lastName = string.Empty;
					String email = string.Empty;

					if (user != null)
					{
						profile = profileManager.GetUserProfile<SitefinityProfile>(user);
						if (profile != null)
						{
							firstName = profile.FirstName;
							lastName = profile.LastName;
							email = profile.User.Email;
						}
						else
						{

							firstName = user.FirstName;
							lastName= user.LastName;
							email = user.Email;
						}
					}

					var categories = handBookItem.GetValue<TrackedList<Guid>>("Category")
						.ToArray();
					string categoryList = string.Empty;
					foreach (var topicItem in topicCategories.Select(t => new
					{
						Id = t,
						ResourceCategoryTile = GetTopicCategories(t).ResourceCategoryTile,
						ResourceParentCategoryTitle = GetTopicCategories(t).ResourceParentCategoryTitle
					})
														.OrderBy(t => t.ResourceParentCategoryTitle)
														.ThenBy(t => t.ResourceCategoryTile))

					{

						categoryList = categoryList + (categories.Contains(topicItem.Id)? "yes" : "no")+ ", ";
					}
					string userDetail = lastUpdatedDate.ToString() + ","
						+ ", "
						+ userId.ToString() + ", "
						+ firstName + ", "
						+ lastName + ", "
						+ email + ", "
						+ DateTime.UtcNow.ToString() + ", "
						+ "A-RIT" + ", "
						+ categoryList
						+ System.Environment.NewLine;
					returnData = returnData + userDetail;
				}
				returnData = csv + returnData;
			}		
			catch (Exception e)
			{
				log.Error("GetUsers" + e.Message);
			}

			return returnData;
		}
	}
}



	